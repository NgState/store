{"version":3,"file":"ng-state-immutablejs-data-strategy.js.map","sources":["ng://@ng-state/immutablejs-data-strategy/lib/immutablejs.data-strategy.ts","ng://@ng-state/immutablejs-data-strategy/lib/immutablejs.data-strategy.module.ts"],"sourcesContent":["import { DataStrategy } from '@ng-state/data-strategy';\r\nimport { Map, fromJS, Collection, Iterable } from 'immutable';\r\nimport * as _Cursor from 'immutable/contrib/cursor';\r\n\r\nexport class ImmutableJsDataStrategy extends DataStrategy {\r\n\r\n    getIn(state: Map<any, any>, path: any[]): Collection<any, any> {\r\n        return state.getIn(path);\r\n    }\r\n\r\n    fromJS(data: any): Collection<any, any> {\r\n        return fromJS(data);\r\n    }\r\n\r\n    toJS(data: Collection<any, any>) {\r\n        return data.toJS();\r\n    }\r\n\r\n    set(state: Map<any, any>, property: string, data: any) {\r\n        return state.set(property, data);\r\n    }\r\n\r\n    setIn(state: Map<any, any>, path: any[], data: any) {\r\n        return state.setIn(path, data);\r\n    }\r\n\r\n    isObject(state: any) {\r\n        return Map.isMap(state) || Iterable.isIterable(state);\r\n    }\r\n\r\n    merge(state: any, newState: any) {\r\n        return state.merge(newState);\r\n    }\r\n\r\n    update(path: any[], action: (state: any) => void) {\r\n        const cursor = _Cursor.from(this.currentState, path, (newData) => {\r\n            this.rootStore.next(newData);\r\n        });\r\n\r\n        cursor.withMutations((state: any) => {\r\n            action(state);\r\n        });\r\n    }\r\n\r\n    overrideContructor(obj: any) {\r\n        if (this.isNotImmutableObject(obj)) { // from ImmutableJs 4 breaking change isIterable => isCollection\r\n            if (obj.constructor === Array) {\r\n                for (let i = 0; i < obj.length; i++) {\r\n                    this.overrideContructor(obj[i]);\r\n                }\r\n            } else {\r\n                obj.__proto__.constructor = Object;\r\n                for (let key in obj) {\r\n                    this.overrideContructor(obj[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetRoot(initialState: any, startingRoute: string): void {\r\n        const state = this.currentState;\r\n\r\n        const router = state.get('router');\r\n\r\n        this.update([], (state: any) => {\r\n            state.clear();\r\n            state.merge(initialState);\r\n\r\n            state.set('router', router);\r\n            state.setIn(['router', 'url'], startingRoute, { fromUpdate: true });\r\n        });\r\n    }\r\n\r\n    reset(path: any[], stateToMerge: any): void {\r\n        this.update(path, (state: any) => {\r\n            state.clear();\r\n            state.merge(stateToMerge);\r\n        });\r\n    }\r\n\r\n    equals(objOne: any, objTwo: any): boolean {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    private isNotImmutableObject(obj: any) {\r\n        return obj !== null\r\n            && typeof (obj) === 'object'\r\n            && !Map.isMap(obj)\r\n            && !Iterable.isIterable(obj);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\nimport { ImmutableJsDataStrategy } from './immutablejs.data-strategy';\r\n\r\n@NgModule({\r\n    providers: [\r\n        { provide: DataStrategy, useClass: ImmutableJsDataStrategy }\r\n    ]\r\n})\r\nexport class ImmutableJsDataStrategyModule {\r\n}\r\n"],"names":["_Cursor.from"],"mappings":"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"}
