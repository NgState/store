{"version":3,"file":"ng-state-data-strategy.umd.js.map","sources":["ng://@ng-state/data-strategy/lib/data-strategy.ts"],"sourcesContent":["import { take } from 'rxjs/operators';\r\nimport { StoreLike } from './store-like';\r\n\r\nexport abstract class DataStrategy {\r\n\r\n    rootStore: StoreLike<any>;\r\n\r\n    abstract getIn(state: any, path: any[]): any;\r\n    abstract get(state: any, property: string): any;\r\n    abstract merge(state: any, newState: any, path?: any[], isRootPath?: boolean): any;\r\n    abstract update(path: any[], action: (state: any) => void): void;\r\n    abstract fromJS(data: any): any;\r\n    abstract toJS(data: any): any;\r\n    abstract set(state: any, property: string, data: any): any;\r\n    abstract setIn(state: any, path: any[], data: any, additionalData?: { fromUpdate: boolean }): any;\r\n    abstract isObject(state: any): any;\r\n    abstract overrideContructor(obj: any): any;\r\n    abstract reset(path: any[], stateToMerge: any): void;\r\n    abstract resetRoot(initialState: any, startingRoute: string): void;\r\n\r\n    protected get currentState() {\r\n        let currentState: any;\r\n\r\n        this.rootStore.pipe(take(1))\r\n            .subscribe(state => {\r\n                currentState = state;\r\n            });\r\n\r\n        return currentState;\r\n    }\r\n\r\n    init(store: StoreLike<any>, isProd: boolean) {\r\n        this.rootStore = store;\r\n    }\r\n}"],"names":["take"],"mappings":";;;;;;;;;;AAAA;;;AAGA;;;QAAA;SA+BC;QAdG,sBAAc,sCAAY;;;;gBAA1B;;oBACQ,YAAiB;gBAErB,IAAI,CAAC,SAAS,CAAC,IAAI,CAACA,cAAI,CAAC,CAAC,CAAC,CAAC;qBACvB,SAAS;;;eAAC,UAAA,KAAK;oBACZ,YAAY,GAAG,KAAK,CAAC;iBACxB,EAAC,CAAC;gBAEP,OAAO,YAAY,CAAC;aACvB;;;WAAA;;;;;;QAED,2BAAI;;;;;YAAJ,UAAK,KAAqB,EAAE,MAAe;gBACvC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;QACL,mBAAC;IAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;"}
