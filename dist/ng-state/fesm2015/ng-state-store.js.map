{"version":3,"file":"ng-state-store.js.map","sources":["ng://@ng-state/store/lib/services/dispatcher.ts","ng://@ng-state/store/lib/helpers/service-locator.ts","ng://@ng-state/store/lib/state/router-state.ts","ng://@ng-state/store/lib/state/state.ts","ng://@ng-state/store/lib/state/history.ts","ng://@ng-state/store/lib/store/select.ts","ng://@ng-state/store/lib/debug/debug-info.ts","ng://@ng-state/store/lib/store/update.ts","ng://@ng-state/store/lib/store/initialize.ts","ng://@ng-state/store/lib/store/map.ts","ng://@ng-state/store/lib/store/reset.ts","ng://@ng-state/store/lib/store/plugins/form-manager.plugin.ts","ng://@ng-state/store/lib/store/plugins/persist-state.plugin.ts","ng://@ng-state/store/lib/store/store.ts","ng://@ng-state/store/lib/state/history-controller.ts","ng://@ng-state/store/lib/ng-state.module.ts","ng://@ng-state/store/lib/ng-state.test-bed.ts","ng://@ng-state/store/lib/helpers/helpers.ts","ng://@ng-state/store/lib/decorators/component-state.decorator.ts","ng://@ng-state/store/lib/decorators/inject-store.decorator.ts"],"sourcesContent":["import {Observable, Subject, Subscription} from 'rxjs';\r\nimport { filter, share, map } from 'rxjs/operators';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class Message {\r\n    constructor(public type?: string, public payload?: any) {\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class Dispatcher {\r\n    private subject = new Subject<any>();\r\n\r\n    get observable(): Observable<Message> {\r\n        return this.subject.asObservable();\r\n    }\r\n\r\n    getMessagesOfType(messageType: string): Observable<Message> {\r\n        return this.subject.pipe(filter(msg => msg.type === messageType), share());\r\n    }\r\n\r\n    publish(message: Message): void;\r\n    publish(messageType: string, payload?: any): void;\r\n    publish(message: string | Message, payload?: any): void {\r\n        message = (<Message>message).type !== undefined\r\n            ? message\r\n            : new Message(message as string, payload);\r\n\r\n        this.subject.next(message);\r\n    }\r\n\r\n    subscribe(message: Message, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\r\n    subscribe(messageType: string, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\r\n    subscribe(messageType: string | Message, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n        messageType = (<Function>messageType).prototype instanceof Message\r\n            ? (new (<any>messageType)() as Message).type\r\n            : messageType;\r\n\r\n        return this.getMessagesOfType(messageType as string)\r\n            .pipe(map(msg =>  msg.payload))\r\n            .subscribe(observerOrNext, error, complete);\r\n    }\r\n}","import { Injector } from '@angular/core';\r\n\r\nexport class ServiceLocator {\r\n    static injector: Injector = null;\r\n}","import { Router, NavigationCancel, NavigationEnd, RoutesRecognized } from '@angular/router';\r\nimport { Store } from '../store/store';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class RouterState {\r\n    static startingRoute = '';\r\n    private dataStrategy: DataStrategy;\r\n\r\n    constructor(private store: Store<any>, private router: Router, private debugInfo: DebugInfo) {\r\n    }\r\n\r\n    init() {\r\n        this.dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n        this.initRouter();\r\n        this.bindRouter();\r\n    }\r\n\r\n    private initRouter() {\r\n        this.router.events\r\n            .pipe(\r\n                filter(event => event instanceof RoutesRecognized),\r\n                take(1)\r\n            )\r\n            .subscribe((event: RoutesRecognized) => {\r\n                this.store.initialize(['router'], { url: event.url }, false);\r\n            });\r\n    }\r\n\r\n    private bindRouter() {\r\n        if (!this.router.events) {\r\n            return;\r\n        }\r\n\r\n        let cancelledId = -1;\r\n        this.router.events\r\n            .pipe(filter(() => this.debugInfo && !this.debugInfo.isTimeTravel))\r\n            .subscribe((event) => {\r\n                if (event instanceof NavigationCancel) {\r\n                    cancelledId = (<NavigationCancel>event).id;\r\n                }\r\n                if (event instanceof NavigationEnd && (<NavigationEnd>event).id !== cancelledId) {\r\n                    (<Store<any>>this.store.select(['router'])).update(state => {\r\n                        this.dataStrategy.set(state, 'url', event.url);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class State<T> extends BehaviorSubject<T> {\r\n  constructor(initialState: T, dataStrategy: DataStrategy) {\r\n    dataStrategy.overrideContructor(initialState);\r\n    super(dataStrategy.fromJS(initialState));\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class StateHistory {\r\n    static initialState = {};\r\n\r\n    private options: StateHistoryOptions = {\r\n        collectHistory: true,\r\n        storeHistoryItems: 100\r\n    };\r\n\r\n    get currentState(): any {\r\n        return StateKeeper.CURRENT_STATE;\r\n    }\r\n\r\n    get history(): any[] {\r\n        return StateKeeper.HISTORY;\r\n    }\r\n\r\n    get storeHistoryItems() {\r\n        return this.options.storeHistoryItems;\r\n    }\r\n\r\n    init(initialState: any) {\r\n        StateHistory.initialState = initialState;\r\n    }\r\n\r\n    changeDefaults(options: StateHistoryOptions) {\r\n        this.options = { ...this.options, ...options };\r\n    }\r\n\r\n    setCurrentState(state: any) {\r\n        StateKeeper.CURRENT_STATE = state;\r\n    }\r\n\r\n    add(item: HistoryItem) {\r\n        if (!this.options.collectHistory) {\r\n            return;\r\n        }\r\n\r\n        if (StateKeeper.HISTORY.length >= this.options.storeHistoryItems) {\r\n            StateKeeper.HISTORY.shift();\r\n        }\r\n\r\n        StateKeeper.HISTORY.push(item);\r\n    }\r\n}\r\n\r\nexport class StateKeeper {\r\n    static CURRENT_STATE: any = null;\r\n    static HISTORY = [];\r\n}\r\n\r\nexport interface StateHistoryOptions {\r\n    collectHistory?: boolean;\r\n    storeHistoryItems?: number | null;\r\n}\r\n\r\nexport interface HistoryItem {\r\n    message: string;\r\n    state: any;\r\n}","import { Store } from './store';\r\nimport { map, distinctUntilChanged, takeWhile } from 'rxjs/operators';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Select {\r\n    constructor(path: any) {\r\n        let mapped$;\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n        if (typeof path === 'object') {\r\n            mapped$ = (<any>this).pipe(\r\n                map((state: any) => dataStrategy.getIn(state, path)),\r\n                takeWhile((state: any) => state !== undefined),\r\n                distinctUntilChanged()\r\n            );\r\n        }\r\n        else {\r\n            throw new TypeError(`Unexpected type ${typeof path} in select operator,`\r\n                + ` expected 'object' or 'function'`);\r\n        }\r\n\r\n        return mapped$;\r\n    }\r\n}\r\n\r\nexport interface SelectSignature {\r\n  (path: any[]): Store<any>;\r\n}","import { DebugInfoData } from './debug-info-data';\r\nimport { StateHistory } from '../state/history';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\n@Injectable()\r\nexport class DebugInfo {\r\n    private debugInfo: DebugInfoData = null;\r\n    private debugMode: boolean;\r\n    private withDevTools: boolean;\r\n    private debugStatePath: any[] = null;\r\n    private devTools = null;\r\n    private devToolsSubscription = null;\r\n    private options: DebugOptions = {\r\n        enableConsoleOutput: true,\r\n        enableDevToolsOutput: true\r\n    };\r\n\r\n    static instance: DebugInfo = null;\r\n\r\n    isTimeTravel = false;\r\n    onApplyHistory = new Subject<DebugHistoryItem>();\r\n\r\n    constructor(private stateHistory: StateHistory, private zone: NgZone, private dataStrategy: DataStrategy) {\r\n    }\r\n\r\n    get publicApi() {\r\n        return {\r\n            start: this.start,\r\n            stop: this.stop\r\n        };\r\n    }\r\n\r\n    get isDebugMode() {\r\n        return this.debugMode;\r\n    }\r\n\r\n    init(debugMode: boolean) {\r\n        this.debugMode = debugMode;\r\n        this.setWithDevTools();\r\n\r\n        if (!this.withDevTools || !debugMode) {\r\n            return;\r\n        }\r\n\r\n        this.trackWithDevTools([]);\r\n    }\r\n\r\n    changeDefaults(options: DebugOptions) {\r\n        this.options = { ...this.options, ...options };\r\n    }\r\n\r\n    add(info: DebugInfoData) {\r\n        if (this.debugMode) {\r\n            this.debugInfo = { ...info };\r\n        }\r\n    }\r\n\r\n    onStateChange(state: any, isIntialState: boolean) {\r\n        if (this.debugMode && !this.isTimeTravel) {\r\n            this.logDebugInfo(state, isIntialState);\r\n        }\r\n    }\r\n\r\n    turnOnTimeTravel() {\r\n        this.isTimeTravel = true;\r\n    }\r\n\r\n    turnOffTimeTravel() {\r\n        this.isTimeTravel = false;\r\n    }\r\n\r\n    private logDebugInfo(state: any, isIntialState: boolean) {\r\n        let debugState = this.debugStatePath && this.dataStrategy.getIn(state, this.debugStatePath) || state;\r\n        if (this.dataStrategy.isObject(debugState)) {\r\n            debugState = this.dataStrategy.toJS(debugState);\r\n        }\r\n\r\n        const debugMessage = this.getDebugMessage();\r\n        this.consoleLog(debugMessage, debugState);\r\n\r\n        if (!this.withDevTools) {\r\n            return;\r\n        }\r\n\r\n        if (isIntialState) {\r\n            this.devTools.init(debugState);\r\n        } else {\r\n            this.devTools.send(debugMessage, debugState);\r\n        }\r\n\r\n        this.stateHistory.add({ message: debugMessage, state: debugState });\r\n\r\n        this.debugInfo = null;\r\n    }\r\n\r\n    private consoleLog(message: string, state: any) {\r\n        if (this.options.enableConsoleOutput) {\r\n            console.info(message, state);\r\n        }\r\n    }\r\n\r\n    private getDebugMessage() {\r\n        let message = '@state/';\r\n\r\n        if (!this.debugInfo) {\r\n            return `${message}${this.getDebugStatePath()}`;\r\n        }\r\n\r\n        message += `${this.debugInfo.statePath.join('/')} - `;\r\n        message += `${(this.debugInfo.message ? this.debugInfo.message.toUpperCase() : (this.debugInfo.actionType || ''))}`;\r\n\r\n        return message;\r\n    }\r\n\r\n    private getDebugStatePath() {\r\n        return this.debugStatePath && this.debugStatePath.length > 0\r\n            ? this.debugStatePath.join('->')\r\n            : 'root';\r\n    }\r\n\r\n    private trackWithDevTools(statePath: any[]) {\r\n        if (!this.withDevTools || this.devTools) {\r\n            return;\r\n        }\r\n\r\n        this.zone.run(() => {\r\n            this.devTools = window['__REDUX_DEVTOOLS_EXTENSION__'].connect({ maxAge: this.stateHistory.storeHistoryItems });\r\n        });\r\n\r\n        this.devToolsSubscription = this.devTools.subscribe((message: any) => {\r\n            if (message.type === 'DISPATCH' && (message.payload.type === 'JUMP_TO_ACTION' || message.payload.type === 'JUMP_TO_STATE')) {\r\n                this.onApplyHistory.next({\r\n                    state: this.dataStrategy.fromJS(JSON.parse(message.state)),\r\n                    statePath: statePath\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private stopTrackingWithDevTools() {\r\n        if (this.withDevTools) {\r\n            this.withDevTools = false;\r\n            window['__REDUX_DEVTOOLS_EXTENSION__'].disconnect();\r\n            this.devToolsSubscription();\r\n            this.devTools = null;\r\n        }\r\n    }\r\n\r\n    private setWithDevTools() {\r\n        this.withDevTools = this.options.enableDevToolsOutput && typeof window !== 'undefined' && !!window['__REDUX_DEVTOOLS_EXTENSION__'];\r\n    }\r\n\r\n    private start = (statePath: any[] = []) => {\r\n        this.debugStatePath = statePath;\r\n        this.debugMode = true;\r\n\r\n        this.stopTrackingWithDevTools();\r\n        this.setWithDevTools();\r\n        this.trackWithDevTools(statePath);\r\n        this.onStateChange(this.stateHistory.currentState, true);\r\n    }\r\n\r\n    private stop = () => {\r\n        this.debugMode = false;\r\n        this.stopTrackingWithDevTools();\r\n    }\r\n}\r\n\r\nexport interface DebugOptions {\r\n    enableConsoleOutput?: boolean;\r\n    enableDevToolsOutput?: boolean;\r\n}\r\n\r\nexport interface DebugHistoryItem {\r\n    state: any;\r\n    statePath: any[];\r\n}","import { ActionType, DebugInfoData } from '../debug/debug-info-data';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Update {\r\n    constructor(action: (state: any) => void, debugInfo: DebugInfoData = {}) {\r\n\r\n        const defaultDebugInfo = { actionType: ActionType.Update, statePath: (<any>this).statePath };\r\n        DebugInfo.instance.add({ ...defaultDebugInfo, ...debugInfo });\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n\r\n        try {\r\n            dataStrategy.update((this as any).statePath, action);\r\n        } catch (exception) {\r\n            console.error(exception);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UpdateSignature<T> {\r\n    (action: (state: T) => void, debugInfo?: DebugInfoData): void;\r\n}","import { Helpers } from '../helpers/helpers';\r\nimport { tap, take } from 'rxjs/operators';\r\nimport { Store } from './store';\r\nimport { ActionType } from '../debug/debug-info-data';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Initialize {\r\n    newStore: Store<any>;\r\n\r\n    constructor(statePath: any[], initialState: any = null) {\r\n        const initialized = '__initialized';\r\n\r\n        let actionWrapper = function (state: any) {\r\n            const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n            if (dataStrategy.getIn(state, [...statePath, initialized])) {\r\n                return;\r\n            }\r\n\r\n            dataStrategy.overrideContructor(initialState);\r\n            initialState.constructor = Object;\r\n            initialState = dataStrategy.fromJS(initialState);\r\n            initialState = dataStrategy.set(initialState, initialized, true);\r\n\r\n            let newState;\r\n\r\n            try {\r\n                newState = dataStrategy.setIn(state, statePath, initialState);\r\n                this.newStore = (<any>this).select(statePath);\r\n                this.newStore.initialState = initialState;\r\n                this.newStore.rootPath = statePath;\r\n            } catch (exception) {\r\n                console.error(exception);\r\n            }\r\n\r\n            (<any>this).source.next(newState);\r\n        }.bind(this);\r\n\r\n        const defaultDebugInfo = { actionType: ActionType.Initialize, statePath: statePath };\r\n        DebugInfo.instance.add(defaultDebugInfo);\r\n\r\n        (<any>this).pipe(\r\n            tap(actionWrapper),\r\n            take(1)\r\n        ).subscribe();\r\n\r\n        return this.newStore as any;\r\n    }\r\n}\r\n\r\nexport interface InitializeSignature<T> {\r\n    <R>(statePath, initialState?: T, addToHistory?: boolean): Store<R>;\r\n}","import { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class Map<T, R> {\r\n    constructor(action: (state: any) => Observable<R>) {\r\n        return (<any>this).pipe(map((state: any) => action(state)));\r\n    }\r\n}\r\n\r\nexport interface MapSgnature<T> {\r\n    <R>(action: (state: T) => R): Observable<R>;\r\n}","import { Store } from './store';\r\nimport { StateKeeper, StateHistory } from '../state/history';\r\nimport { ActionType } from '../debug/debug-info-data';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { RouterState } from '../state/router-state';\r\n\r\nexport class Reset {\r\n    constructor(debugMessage: string = null) {\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n        const restoreState = function (store: Store<any>) {\r\n            let path = store.statePath.filter(item => !store.rootPath.includes(item));\r\n            const isRootPath = Array.isArray(path) && path.length === 0;\r\n            if (isRootPath) {\r\n                dataStrategy.resetRoot(StateHistory.initialState, RouterState.startingRoute);\r\n            } else {\r\n                let initialState: any = !!store.initialState\r\n                    ? store.initialState\r\n                    : dataStrategy.fromJS(StateHistory.initialState);\r\n\r\n                initialState = dataStrategy.getIn(initialState, (path));\r\n\r\n                dataStrategy.reset(store.statePath, initialState);\r\n            }\r\n\r\n            const defaultDebugInfo = { actionType: ActionType.Reset, statePath: path, debugMessage: debugMessage };\r\n            DebugInfo.instance.add(defaultDebugInfo);\r\n        };\r\n\r\n        if (!dataStrategy.isObject(dataStrategy.getIn(StateKeeper.CURRENT_STATE, ((this as any).statePath)))) {\r\n            throw new Error(`Cannot resotre state at path: ${(this as any).statePath}. Maybe you are trying to restore value rather then state.`);\r\n        }\r\n\r\n        restoreState((this as any));\r\n    }\r\n}\r\n\r\nexport interface ResetSignature {\r\n    <R>(debugMessage?: string): void;\r\n}","import { distinctUntilChanged, debounceTime, takeUntil, take } from 'rxjs/operators';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Store } from '../store';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\nimport { ServiceLocator } from '../../helpers/service-locator';\r\n\r\nexport class NgFormStateManager {\r\n\r\n    private unsubscribe = new Subject();\r\n    private form: FormGroupLike;\r\n    private params: NgFormStateManagerParams;\r\n    private store: Store<any>;\r\n    private dataStrategy: DataStrategy;\r\n\r\n    private onChangeFn: (state: any) => void;\r\n    private shouldUpdateStateFn: (params: ShoulUpdateStateParams) => boolean;\r\n\r\n    constructor(store: Store<any>) {\r\n        this.store = store;\r\n    }\r\n\r\n    bind(form: FormGroupLike, params: NgFormStateManagerParams = {}): NgFormStateManager {\r\n        this.dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n        this.form = form;\r\n        this.params = { ... { debounceTime: 100, emitEvent: false }, ...params };\r\n        this.setInitialValue();\r\n        this.subscribeToFormChange();\r\n\r\n        return this;\r\n    }\r\n\r\n    reset() {\r\n        this.store.reset();\r\n    }\r\n\r\n    destroy() {\r\n        this.unsubscribe.next(true);\r\n        this.unsubscribe.complete();\r\n\r\n        this.form = null;\r\n        this.store = null;\r\n        this.onChangeFn = null;\r\n        this.shouldUpdateStateFn = null;\r\n    }\r\n\r\n    onChange(onChangeFn: (state: any) => void) {\r\n        this.onChangeFn = onChangeFn;\r\n        return this;\r\n    }\r\n\r\n    shouldUpdateState(shouldUpdateStateFn: (params: ShoulUpdateStateParams) => boolean) {\r\n        this.shouldUpdateStateFn = shouldUpdateStateFn;\r\n        return this;\r\n    }\r\n\r\n    private setInitialValue() {\r\n        this.store\r\n            .pipe(\r\n                distinctUntilChanged(),\r\n                takeUntil(this.unsubscribe)\r\n            )\r\n            .subscribe((state: any) => {\r\n                this.form.patchValue(this.dataStrategy.toJS(state), { emitEvent: this.params.emitEvent });\r\n            });\r\n    }\r\n\r\n    private subscribeToFormChange() {\r\n\r\n        this.form.valueChanges\r\n            .pipe(\r\n                debounceTime(this.params.debounceTime),\r\n                distinctUntilChanged(),\r\n                takeUntil(this.unsubscribe)\r\n            )\r\n            .subscribe(value => {\r\n                let stateUpdated = false;\r\n\r\n                this.store.update((state: any) => {\r\n                    stateUpdated = this.executeUpdate(value, state);\r\n                });\r\n\r\n                if (stateUpdated) {\r\n                    this.onChangeCall();\r\n                }\r\n            });\r\n    }\r\n\r\n    private executeUpdate(value: any, state: any): boolean {\r\n        if (this.shouldUpdateStateFn) {\r\n            if (this.shouldUpdateStateFn({\r\n                form: this.form,\r\n                state: state,\r\n                value: value\r\n            })) {\r\n                this.dataStrategy.merge(state, this.dataStrategy.fromJS(value));\r\n                return true;\r\n            }\r\n        } else {\r\n            this.dataStrategy.merge(state, this.dataStrategy.fromJS(value));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private onChangeCall() {\r\n        if (this.onChangeFn) {\r\n            this.store\r\n                .pipe(take(1))\r\n                .subscribe(state => {\r\n                    this.onChangeFn(this.dataStrategy.toJS(state));\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport type FormGroupLike = {\r\n    patchValue: Function;\r\n    setValue: Function;\r\n    value: any;\r\n    get: Function;\r\n    valueChanges: Observable<any>;\r\n    controls: any;\r\n};\r\n\r\nexport type NgFormStateManagerParams = {\r\n    debounceTime?: number;\r\n    emitEvent?: boolean;\r\n};\r\n\r\nexport interface ShoulUpdateStateParams {\r\n    form: FormGroupLike;\r\n    state: any;\r\n    value: any;\r\n}","import { tap, take } from 'rxjs/operators';\r\nimport { Store } from '../store';\r\nimport { Observable, isObservable, from, of, ReplaySubject, forkJoin } from 'rxjs';\r\nimport { ServiceLocator } from '../../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class PersistStateManager {\r\n    private prefix = 'state::';\r\n\r\n    protected static customStorageConfig: PersistStateParams = {};\r\n\r\n    protected defaults: PersistStateParams = {\r\n        key: '',\r\n        storageConfig: null,\r\n        deserialize: JSON.parse,\r\n        serialize: JSON.stringify\r\n    };\r\n\r\n    constructor(private store: Store<any>) {\r\n    }\r\n\r\n    static configureStorage(storage: PersistStateStorage, getKeys: () => Promise<string[]> | Observable<string[]> | string[]) {\r\n        PersistStateManager.customStorageConfig.storageConfig = { storage: storage, getKeys: getKeys };\r\n    }\r\n\r\n    static configureSerializer(serialize: Function, deserialize: Function) {\r\n        PersistStateManager.customStorageConfig.serialize = serialize;\r\n        PersistStateManager.customStorageConfig.deserialize = deserialize;\r\n    }\r\n\r\n    save(params?: PersistStateParams): Observable<PersistStateItem> {\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n        const onSaveComplete = new ReplaySubject<PersistStateItem>(1);\r\n\r\n        params = this.getParams(params, this.store);\r\n\r\n        this.store.pipe(\r\n            tap((state: any) => {\r\n                this.resolve(params.storageConfig.storage.setItem(params.key, params.serialize(dataStrategy.toJS(state))))\r\n                    .pipe(take(1))\r\n                    .subscribe(_ => {\r\n                        onSaveComplete.next({\r\n                            key: params.key,\r\n                            data: dataStrategy.toJS(state)\r\n                        });\r\n                    });\r\n            }),\r\n            take(1)\r\n        ).subscribe();\r\n\r\n        return onSaveComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    load(params?: PersistStateParams, keepEntry = false): Observable<PersistStateItem> {\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n        const onLoadComplete = new ReplaySubject<PersistStateItem>(1);\r\n\r\n        params = this.getParams(params, this.store);\r\n        this.resolve(params.storageConfig.storage.getItem(params.key))\r\n            .pipe(take(1))\r\n            .subscribe(loadedState => {\r\n                this.store.update((state: Map<any, any>) => {\r\n                    dataStrategy.merge(state, dataStrategy.fromJS(params.deserialize(loadedState)));\r\n                });\r\n\r\n                if (!keepEntry) {\r\n                    this.removeAction(params);\r\n                }\r\n\r\n                onLoadComplete.next({\r\n                    key: params.key,\r\n                    data: loadedState\r\n                });\r\n            });\r\n\r\n        return onLoadComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    remove(params?: PersistStateParams): Observable<string> {\r\n        params = this.getParams(params, this.store);\r\n        return this.removeAction(params);\r\n    }\r\n\r\n    clear(params?: PersistStateParams): Observable<string[]> {\r\n        const onClearComplete = new ReplaySubject<string[]>(1);\r\n        const clearKeys: Observable<string>[] = [];\r\n\r\n        params = this.getParams(params, this.store);\r\n\r\n        this.resolve(params.storageConfig.getKeys())\r\n            .pipe(take(1))\r\n            .subscribe(keys => {\r\n                keys.filter((e: string) => e.startsWith(this.prefix))\r\n                    .map((key: string) => {\r\n                        const localParams = { ...params };\r\n                        localParams.key = key;\r\n\r\n                        clearKeys.push(this.removeAction(localParams));\r\n                    });\r\n\r\n                forkJoin(clearKeys)\r\n                    .pipe(take(1))\r\n                    .subscribe(keys => {\r\n                        onClearComplete.next(keys);\r\n                    });\r\n            });\r\n\r\n        return onClearComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    private removeAction(params: PersistStateParams): Observable<string> {\r\n        const onRemoveComplete = new ReplaySubject<string>(1);\r\n\r\n        this.resolve(params.storageConfig.storage.removeItem(params.key))\r\n            .pipe(take(1))\r\n            .subscribe(_ => {\r\n                onRemoveComplete.next(params.key);\r\n            });\r\n\r\n        return onRemoveComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    private getParams(params: PersistStateParams, store: Store<any>) {\r\n        this.setDefaultStorage();\r\n\r\n        params = { ...this.defaults, ...PersistStateManager.customStorageConfig, ...params };\r\n\r\n        if (!params.key) {\r\n            params.key = store.statePath.join('.');\r\n        }\r\n\r\n        params.key = `${this.prefix}${params.key}`;\r\n\r\n        return params;\r\n    }\r\n\r\n    private setDefaultStorage() {\r\n        if (!this.defaults.storageConfig) {\r\n            this.defaults.storageConfig = {\r\n                storage: localStorage,\r\n                getKeys: () => Object.keys(localStorage)\r\n            };\r\n        }\r\n    }\r\n\r\n    private isPromise(v: any) {\r\n        return v && typeof v.then === 'function';\r\n    }\r\n\r\n    private resolve(asyncOrValue: any) {\r\n        if (this.isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\r\n            return from(asyncOrValue);\r\n        }\r\n\r\n        return of(asyncOrValue);\r\n    }\r\n}\r\n\r\nexport interface PersistStateStorage {\r\n    getItem(key: string): Promise<any> | Observable<any> | any;\r\n    setItem(key: string, value: any): Promise<any> | Observable<any> | any;\r\n    removeItem(key: string): Promise<any> | Observable<any> | any;\r\n    clear(): void;\r\n}\r\n\r\nexport interface PersistStateParams {\r\n    key?: string;\r\n    storageConfig?: StorageConfiguartion;\r\n    deserialize?: Function;\r\n    serialize?: Function;\r\n}\r\n\r\nexport interface StorageConfiguartion {\r\n    storage: PersistStateStorage;\r\n    getKeys: () => Promise<string[]> | Observable<string[]> | string[];\r\n}\r\n\r\nexport interface PersistStateItem {\r\n    key: string;\r\n    data: any;\r\n}","import { Select, SelectSignature } from './select';\r\nimport { Update, UpdateSignature } from './update';\r\nimport { Initialize, InitializeSignature } from './initialize';\r\nimport { Operator, Observable, Observer } from 'rxjs';\r\nimport { MapSgnature, Map } from './map';\r\nimport { ResetSignature, Reset } from './reset';\r\nimport { NgFormStateManager } from './plugins/form-manager.plugin';\r\nimport { PersistStateManager } from './plugins/persist-state.plugin';\r\n\r\nexport class Store<T> extends Observable<T> implements Observer<any> {\r\n    statePath: any[] = [];\r\n    rootPath: any[] = [];\r\n    initialState: any;\r\n\r\n    update: UpdateSignature<T>;\r\n    initialize: InitializeSignature<T>;\r\n    map: MapSgnature<T>;\r\n    reset: ResetSignature;\r\n\r\n    form: NgFormStateManager;\r\n    storage: PersistStateManager;\r\n\r\n    constructor(state: Observable<any>) {\r\n        super();\r\n\r\n        this.source = state;\r\n        this.initializeOperators(this);\r\n    }\r\n\r\n    select: SelectSignature = (statePath: string[]): Store<T> => {\r\n        let selectStore = Select.bind(this).call(this, statePath);\r\n        selectStore.statePath = [...this.statePath, ...statePath];\r\n        selectStore.rootPath = this.rootPath;\r\n        selectStore.initialState = this.initialState;\r\n        this.initializeOperators(selectStore);\r\n        return selectStore;\r\n    }\r\n\r\n    lift<R>(operator: Operator<T, R>): Store<R> {\r\n        const store = new Store<R>(this);\r\n        store.operator = operator;\r\n        return store;\r\n    }\r\n\r\n    error(err: any) {\r\n        console.log(err);\r\n    }\r\n\r\n    next(state: any) {\r\n        (<any>this.source).next(state);\r\n    }\r\n\r\n    complete() {\r\n    }\r\n\r\n    initializeOperators(storeContext: Store<T>) {\r\n        storeContext.update = Update.bind(storeContext);\r\n        storeContext.initialize = Initialize.bind(storeContext);\r\n        storeContext.reset = Reset.bind(storeContext);\r\n        storeContext.map = Map.bind(storeContext);\r\n        storeContext.form = new NgFormStateManager(storeContext);\r\n        storeContext.storage = new PersistStateManager(storeContext);\r\n    }\r\n}","import { Store } from '../store/store';\r\nimport { StateHistory } from './history';\r\nimport { Subject } from 'rxjs';\r\nimport { DebugInfo, DebugHistoryItem } from '../debug/debug-info';\r\nimport { Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class HistoryController {\r\n    private onHistoryChange = new Subject();\r\n\r\n    constructor(private store: Store<any>, private history: StateHistory, private debugerInfo: DebugInfo, private router: Router, private dataStrategy: DataStrategy) {\r\n    }\r\n\r\n    init() {\r\n        this.store.subscribe(state => {\r\n            const isIntialState = !this.history.currentState;\r\n\r\n            this.history.setCurrentState(state);\r\n            this.debugerInfo.onStateChange(state, isIntialState);\r\n            this.onHistoryChange.next(true);\r\n        });\r\n\r\n        this.debugerInfo.onApplyHistory.subscribe(this.applyHistory);\r\n    }\r\n\r\n    private applyHistory = (debugHistoryItem: DebugHistoryItem) => {\r\n        this.debugerInfo.turnOnTimeTravel();\r\n\r\n        const targetRoute = this.dataStrategy.getIn(debugHistoryItem.state, ['router', 'url']);\r\n        if (targetRoute && this.router.url !== targetRoute) {\r\n            this.router.navigateByUrl(targetRoute).then(_ => {\r\n                this.applyState(debugHistoryItem.state, debugHistoryItem.statePath);\r\n            });\r\n        } else {\r\n            this.applyState(debugHistoryItem.state, debugHistoryItem.statePath);\r\n        }\r\n\r\n        this.onHistoryChange\r\n            .pipe(take(1))\r\n            .subscribe(_ => {\r\n                this.debugerInfo.turnOffTimeTravel();\r\n            });\r\n    }\r\n\r\n    private applyState(targetState: any, statePath: string[]) {\r\n        if (statePath.length === 0) {\r\n            this.store.next(targetState);\r\n        } else {\r\n            this.store\r\n                .update((state: any) => {\r\n                    this.dataStrategy.setIn(state, statePath, targetState, { fromUpdate: true });\r\n                });\r\n        }\r\n    }\r\n}","import { Inject, Injector, ModuleWithProviders, NgModule, InjectionToken, NgZone } from '@angular/core';\r\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Dispatcher } from './services/dispatcher';\r\nimport { Router } from '@angular/router';\r\nimport { RouterState } from './state/router-state';\r\nimport { ServiceLocator } from './helpers/service-locator';\r\nimport { State } from './state/state';\r\nimport { StateHistory, StateHistoryOptions, StateKeeper } from './state/history';\r\nimport { Store } from './store/store';\r\nimport { HistoryController } from './state/history-controller';\r\nimport { DebugInfo, DebugOptions } from './debug/debug-info';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport const RESTORE_FROM_SERVER = new InjectionToken('RESTORE_FROM_SERVER');\r\nexport const TRANSFER_STATE_KEY = 'state';\r\nexport const INITIAL_STATE = new InjectionToken('INITIAL_STATE');\r\nexport const NG_STATE_OPTIONS = new InjectionToken('NG_STATE_OPTIONS');\r\nexport const IS_PROD = new InjectionToken('IS_PROD');\r\nexport const IS_TEST = new InjectionToken('IS_TEST');\r\n\r\nexport function stateFactory(initialState, dataStrategy: DataStrategy, transferState?: TransferState, restoreFromServer?: boolean) {\r\n    if (transferState && restoreFromServer) {\r\n        const stateKey = makeStateKey<any>(TRANSFER_STATE_KEY);\r\n        if (transferState.hasKey(stateKey)) {\r\n            initialState = transferState.get(stateKey, initialState);\r\n        }\r\n    }\r\n\r\n    return new State(initialState, dataStrategy);\r\n}\r\n\r\nexport function storeFactory(state: State<any>) {\r\n    return new Store(state);\r\n}\r\n\r\nexport function historyControllerFactory(store: Store<any>, history: StateHistory, debugerInfo: DebugInfo, router: Router, dataStrategy: DataStrategy) {\r\n    return new HistoryController(store, history, debugerInfo, router, dataStrategy);\r\n}\r\n\r\nexport function routerStateFactory(store: Store<any>, router: Router, debugerInfo: DebugInfo) {\r\n    return new RouterState(store, router, debugerInfo);\r\n}\r\n\r\nexport function debugInfoFactory(history: StateHistory, zone: NgZone, dataStrategy: DataStrategy) {\r\n    return new DebugInfo(history, zone, dataStrategy);\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule]\r\n})\r\nexport class StoreModule {\r\n    static provideStore(initialState: any, isProd?: boolean, options: NgStateOptions = {}, restoreStateFromServer?: boolean): ModuleWithProviders {\r\n        return {\r\n            ngModule: StoreModule,\r\n            providers: [\r\n                { provide: NG_STATE_OPTIONS, useValue: options },\r\n                { provide: INITIAL_STATE, useValue: initialState },\r\n                { provide: IS_PROD, useValue: isProd },\r\n                { provide: IS_TEST, useValue: false },\r\n                { provide: RESTORE_FROM_SERVER, useValue: restoreStateFromServer },\r\n                { provide: State, useFactory: stateFactory, deps: [INITIAL_STATE, DataStrategy, TransferState, RESTORE_FROM_SERVER] },\r\n                { provide: Store, useFactory: storeFactory, deps: [State] },\r\n                { provide: StateHistory, useClass: StateHistory },\r\n                { provide: DebugInfo, useFactory: debugInfoFactory, deps: [StateHistory, NgZone, DataStrategy] },\r\n                { provide: HistoryController, useFactory: historyControllerFactory, deps: [Store, StateHistory, DebugInfo, Router, DataStrategy] },\r\n                { provide: RouterState, useFactory: routerStateFactory, deps: [Store, Router, DebugInfo] },\r\n                Dispatcher\r\n            ]\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        private stateHistory: StateHistory,\r\n        private debugInfo: DebugInfo,\r\n        injector: Injector,\r\n        historyController: HistoryController,\r\n        routerState: RouterState,\r\n        dataStrategy: DataStrategy,\r\n        store: Store<any>,\r\n        @Inject(INITIAL_STATE) initialState: any,\r\n        @Inject(NG_STATE_OPTIONS) ngStateOptions: any,\r\n        @Inject(IS_PROD) isProd: any\r\n    ) {\r\n        ServiceLocator.injector = injector;\r\n        this.initStateHistory(initialState, ngStateOptions);\r\n        this.initDebugger(ngStateOptions);\r\n        historyController.init();\r\n\r\n        routerState.init();\r\n\r\n        if (!isProd) {\r\n            (<any>window).state = StateHistory;\r\n        }\r\n\r\n        if (!isProd) {\r\n            (<any>window).state = {\r\n                history: StateKeeper,\r\n                debug: debugInfo.publicApi\r\n            };\r\n        }\r\n\r\n        dataStrategy.init(store);\r\n    }\r\n\r\n    private initStateHistory(initialState: any, ngStateOptions: NgStateOptions) {\r\n        if (ngStateOptions && ngStateOptions.history) {\r\n            this.stateHistory.changeDefaults(ngStateOptions.history);\r\n        }\r\n\r\n        this.stateHistory.init(initialState);\r\n    }\r\n\r\n    private initDebugger(ngStateOptions: NgStateOptions) {\r\n        DebugInfo.instance = this.debugInfo;\r\n\r\n        if (!ngStateOptions || !ngStateOptions.debugger) {\r\n            return;\r\n        }\r\n\r\n        if (ngStateOptions.debugger.options) {\r\n            this.debugInfo.changeDefaults(ngStateOptions.debugger.options);\r\n        }\r\n\r\n        if (ngStateOptions.debugger.enableInitialDebugging) {\r\n            this.debugInfo.init(true);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface NgStateOptions {\r\n    history?: StateHistoryOptions;\r\n    debugger?: {\r\n        enableInitialDebugging?: boolean;\r\n        options?: DebugOptions;\r\n    };\r\n}","import { ServiceLocator } from './helpers/service-locator';\r\nimport { IS_TEST, stateFactory, storeFactory } from './ng-state.module';\r\nimport { StateHistory } from './state/history';\r\nimport { Store } from './store/store';\r\nimport { HistoryController } from './state/history-controller';\r\nimport { DebugInfo } from './debug/debug-info';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class NgStateTestBed {\r\n\r\n    private static dataStrategy: DataStrategy = null;\r\n    private static dependencyInjection = <{ key: any, value: any }[]>[];\r\n\r\n    public static setTestEnvironment(dataStrategy: DataStrategy) {\r\n        this.dependencyInjection = [];\r\n        this.dependencyInjection.push({ key: this.getMockName(IS_TEST), value: true });\r\n        this.dependencyInjection.push({ key: this.getMockName(DataStrategy), value: dataStrategy });\r\n\r\n        ServiceLocator.injector = {\r\n            get: (key: any) => {\r\n                const name = this.getMockName(key);\r\n                const service = this.dependencyInjection.find(k => k.key === name);\r\n                if (!service) {\r\n                    throw new Error(`Mock is not found for: ${key}`);\r\n                }\r\n\r\n                return service.value;\r\n            }\r\n        };\r\n\r\n        this.dataStrategy = dataStrategy;\r\n    }\r\n\r\n    public static createStore(initialState: any): Store<any> {\r\n        const state = stateFactory(initialState, this.dataStrategy);\r\n        const store = storeFactory(state);\r\n        this.dataStrategy.init(store);\r\n\r\n        const stateHistory = new StateHistory();\r\n        stateHistory.init(initialState);\r\n        const debugInfo = new DebugInfo(stateHistory, { run: () => { } } as any, this.dataStrategy);\r\n        DebugInfo.instance = debugInfo;\r\n        const historyController = new HistoryController(\r\n            store,\r\n            stateHistory,\r\n            debugInfo,\r\n            { navigateByUrl: () => new Promise(() => { }) } as any,\r\n            this.dataStrategy);\r\n        historyController.init();\r\n\r\n        this.dependencyInjection.push({ key: this.getMockName(Store), value: store });\r\n        return store;\r\n    }\r\n\r\n    private static getMockName(obj: any) {\r\n        if (obj === IS_TEST) {\r\n            return 'IS_TEST';\r\n        }\r\n\r\n        if (obj.constructor.name.toLowerCase() !== 'function') {\r\n            return obj.constructor.name;\r\n        }\r\n\r\n        return obj.prototype.constructor.name;\r\n    }\r\n\r\n    public static createActions<T>(actionsType: any, initialState: any = {}, path: string | any[] = []): T {\r\n        this.createStore(initialState);\r\n        const actions = new (actionsType as any)();\r\n        actions.createTestStore(NgStateTestBed.getPath(path));\r\n\r\n        return actions;\r\n    }\r\n\r\n    public static setActionsToComponent(actions: any, component: any) {\r\n        (<any>component).actions = actions;\r\n    }\r\n\r\n    private static getPath(path: string | string[]) {\r\n        if (path instanceof Array) {\r\n            return path;\r\n        }\r\n\r\n        path = path.split('/');\r\n        return path;\r\n    }\r\n}","export class Helpers {\r\n    static guid() {\r\n        const s4 = () => {\r\n          return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n        };\r\n\r\n        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();\r\n      }\r\n}","import { ServiceLocator } from '../helpers/service-locator';\r\nimport { ChangeDetectorRef, Input, OnDestroy, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { IS_PROD, IS_TEST } from '../ng-state.module';\r\nimport { Dispatcher } from '../services/dispatcher';\r\n\r\nexport function ComponentState(stateActions: any | ((T) => any), disableOnChangesBeforeActionsCreated = true) {\r\n    return (target: any) => {\r\n\r\n        let origInit = target.prototype.ngOnInit || (() => { });\r\n        let origDestroy = target.prototype.ngOnDestroy || (() => { });\r\n        let origOnChanges = target.prototype.ngOnChanges || (() => { });\r\n\r\n        const ensureMarkForCheck = function() {\r\n            if (!this.cd) {\r\n                this.cd = ServiceLocator.injector.get(ChangeDetectorRef);\r\n            }\r\n        };\r\n\r\n        target.prototype.ngOnChanges = function (changes) {\r\n            if (disableOnChangesBeforeActionsCreated && !this.actions) {\r\n                return;\r\n            }\r\n\r\n            origOnChanges.apply(this, arguments);\r\n        };\r\n\r\n        target.prototype.ngOnInit = function () {\r\n            const isTest = ServiceLocator.injector.get(IS_TEST);\r\n            if (isTest) {\r\n                origInit.apply(this, arguments);\r\n                return;\r\n            }\r\n\r\n            if (!this.statePath) {\r\n                this.statePath = [];\r\n            }\r\n\r\n            if (stateActions) {\r\n                ensureMarkForCheck.apply(this);\r\n\r\n                // DOC - CONVETION: only annonymous function allwed for choosing state; Actions can be only named functions;\r\n                const extractedStateAction = stateActions.name === ''\r\n                    ? stateActions(this)\r\n                    : stateActions;\r\n\r\n                const actions = new extractedStateAction();\r\n                this.statePath = actions.createStore(this.statePath, this.stateIndex);\r\n\r\n                this.stateChangeSubscription = ServiceLocator.injector.get(Dispatcher)\r\n                    .subscribe(actions.aId, () => {\r\n                        this.cd.markForCheck();\r\n                    });\r\n\r\n                this.actions = actions;\r\n            }\r\n\r\n            origInit.apply(this, arguments);\r\n        };\r\n\r\n        target.prototype.ngOnDestroy = function () {\r\n            if (this.actions) {\r\n                this.actions.onDestroy();\r\n            }\r\n\r\n            if (this.stateChangeSubscription) {\r\n                this.stateChangeSubscription.unsubscribe();\r\n            }\r\n\r\n            origDestroy.apply(this, arguments);\r\n        };\r\n    };\r\n}\r\n\r\nexport class HasStateActions<T> implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() statePath: any;\r\n    @Input() stateIndex?: string | number = null;\r\n\r\n    readonly actions: T;\r\n    readonly cd: ChangeDetectorRef;\r\n\r\n    constructor(cd: ChangeDetectorRef) {\r\n        this.cd = cd;\r\n    }\r\n\r\n    ngOnInit(): void { }\r\n    ngOnChanges(changes: SimpleChanges): void { }\r\n    ngOnDestroy(): void { }\r\n}","import { Observable } from 'rxjs';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { Store } from '../store/store';\r\nimport { Helpers } from '../helpers/helpers';\r\nimport { Dispatcher } from '../services/dispatcher';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport function InjectStore(newPath: string[] | string | ((currentPath, stateIndex) => string[] | string), intialState: Object | any = null, debug: boolean = false) {\r\n    let getStatePath = (currentPath, stateIndex, extractedPath) => {\r\n\r\n        let transformedPath = (<string[]>extractedPath).map(item => {\r\n            return item === '${stateIndex}'\r\n                ? stateIndex\r\n                : item;\r\n        });\r\n\r\n        return [...currentPath, ...transformedPath];\r\n    };\r\n\r\n    let getAbsoluteStatePath = (stateIndex: (string | number) | (string | number)[], extractedPath) => {\r\n        const transformedPath = (<string>extractedPath).split('/');\r\n        if (typeof stateIndex === 'string' || typeof stateIndex === 'number') {\r\n            stateIndex = [stateIndex];\r\n        }\r\n\r\n        let nthStatePathIndex = 0;\r\n        transformedPath.forEach((value, index) => {\r\n            if (value === '${stateIndex}') {\r\n                if ((<any[]>stateIndex).length <= nthStatePathIndex) {\r\n                    throw new Error(`State path ${newPath} has not enough stateIndexes set. Please provide stateIndexes as array in the same order as set in statePath.`);\r\n                }\r\n\r\n                transformedPath[index] = stateIndex[nthStatePathIndex];\r\n                nthStatePathIndex++;\r\n            }\r\n        });\r\n\r\n        return transformedPath;\r\n    };\r\n\r\n    let getAllGetters = (target: any): any[] => {\r\n        const targetMethods = Reflect.getPrototypeOf(target);\r\n        let methods = Object.entries(Object.getOwnPropertyDescriptors(targetMethods))\r\n            .map(([key, descriptor]: [string, any]) => {\r\n                return {\r\n                    name: key,\r\n                    isGetter: typeof descriptor.get === 'function'\r\n                };\r\n            })\r\n            .filter(method => method.isGetter)\r\n            .map(method => method.name);\r\n\r\n        return methods;\r\n    };\r\n\r\n    let convertGettersToProperties = (instance: any) => {\r\n        const getters = getAllGetters(instance);\r\n        getters.forEach(name => {\r\n\r\n            const tempGetter = instance[name];\r\n            if (tempGetter instanceof Observable) {\r\n                delete instance[name];\r\n                Object.defineProperty(instance, name, {\r\n                    value: tempGetter\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return (target: any) => {\r\n\r\n        target.prototype.createStore = function (currentPath: any[], stateIndex: (string | number) | (string | number)[]) {\r\n            this.aId = Helpers.guid();\r\n\r\n            let extractedPath = typeof newPath === 'function' && (<any>newPath).name === ''\r\n                ? (<any>newPath)(currentPath, stateIndex)\r\n                : newPath;\r\n\r\n            const statePath = typeof extractedPath === 'string'\r\n                ? getAbsoluteStatePath(stateIndex, extractedPath)\r\n                : getStatePath(currentPath, stateIndex, extractedPath);\r\n\r\n            const store = ServiceLocator.injector.get(Store) as Store<any>;\r\n            const dispatcher = ServiceLocator.injector.get(Dispatcher);\r\n\r\n            this.store = intialState\r\n                 ? store.initialize(statePath, intialState)\r\n                 : store.select(statePath);\r\n\r\n            this.stateChangeSubscription = this.store.subscribe((state: any) => {\r\n                this.state = state;\r\n                dispatcher.publish(this.aId);\r\n\r\n                if (debug) {\r\n                    const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n                    console.info(dataStrategy.toJS(state));\r\n                }\r\n            });\r\n\r\n            convertGettersToProperties(this);\r\n\r\n            return statePath;\r\n        };\r\n\r\n        target.prototype.createTestStore = function (statePath: any[]) {\r\n            let store = ServiceLocator.injector.get(Store);\r\n            this.store = store.select(statePath);\r\n            const that = this;\r\n            this.stateChangeSubscription = this.store.subscribe((state: any) => {\r\n                that.state = state;\r\n            });\r\n        };\r\n\r\n        target.prototype.onDestroy = function () {\r\n            this.stateChangeSubscription.unsubscribe();\r\n        };\r\n    };\r\n}\r\n\r\nexport class HasStore<T> {\r\n    store: Store<T> = null;\r\n    state?: T = null;\r\n}"],"names":[],"mappings":"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"}
