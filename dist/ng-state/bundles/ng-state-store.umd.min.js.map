{"version":3,"sources":["ng://@ng-state/store/lib/services/dispatcher.ts","ng://@ng-state/store/lib/helpers/service-locator.ts","ng://@ng-state/store/lib/state/router-state.ts","node_modules/tslib/tslib.es6.js","ng://@ng-state/store/lib/state/state.ts","ng://@ng-state/store/lib/state/history.ts","ng://@ng-state/store/lib/store/select.ts","ng://@ng-state/store/lib/debug/debug-info.ts","ng://@ng-state/store/lib/store/update.ts","ng://@ng-state/store/lib/store/initialize.ts","ng://@ng-state/store/lib/store/map.ts","ng://@ng-state/store/lib/store/reset.ts","ng://@ng-state/store/lib/store/plugins/form-manager.plugin.ts","ng://@ng-state/store/lib/store/plugins/persist-state.plugin.ts","ng://@ng-state/store/lib/store/store.ts","ng://@ng-state/store/lib/state/history-controller.ts","ng://@ng-state/store/lib/ng-state.module.ts","ng://@ng-state/store/lib/ng-state.test-bed.ts","ng://@ng-state/store/lib/helpers/helpers.ts","ng://@ng-state/store/lib/decorators/component-state.decorator.ts","ng://@ng-state/store/lib/decorators/inject-store.decorator.ts"],"names":["Message","type","payload","this","Object","defineProperty","Dispatcher","prototype","subject","asObservable","getMessagesOfType","messageType","pipe","filter","msg","share","publish","message","undefined","next","subscribe","observerOrNext","error","complete","map","Injectable","Subject","ServiceLocator","injector","RouterState","init","dataStrategy","get","DataStrategy","initRouter","bindRouter","_this","router","events","event","RoutesRecognized","take","store","initialize","url","cancelledId","debugInfo","isTimeTravel","NavigationCancel","id","NavigationEnd","select","update","state","set","startingRoute","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","done","push","value","__spread","concat","tslib_1.__extends","BehaviorSubject","State","initialState","overrideContructor","_super","fromJS","StateHistory","StateKeeper","CURRENT_STATE","HISTORY","options","storeHistoryItems","changeDefaults","setCurrentState","add","item","collectHistory","shift","Select","path","TypeError","getIn","takeWhile","distinctUntilChanged","DebugInfo","start","stop","debugMode","setWithDevTools","withDevTools","trackWithDevTools","info","onStateChange","isIntialState","logDebugInfo","turnOnTimeTravel","turnOffTimeTravel","debugState","debugStatePath","isObject","toJS","debugMessage","getDebugMessage","consoleLog","devTools","send","stateHistory","enableConsoleOutput","console","statePath","join","toUpperCase","actionType","getDebugStatePath","zone","run","window","connect","maxAge","devToolsSubscription","onApplyHistory","JSON","parse","stopTrackingWithDevTools","disconnect","enableDevToolsOutput","instance","NgZone","currentState","Update","action","defaultDebugInfo","exception","Initialize","initialized","actionWrapper","newState","setIn","newStore","rootPath","source","bind","tap","Map","Reset","Error","includes","isArray","resetRoot","reset","restoreState","NgFormStateManager","form","params","debounceTime","emitEvent","setInitialValue","subscribeToFormChange","destroy","unsubscribe","onChangeFn","shouldUpdateStateFn","onChange","shouldUpdateState","takeUntil","patchValue","valueChanges","stateUpdated","executeUpdate","onChangeCall","merge","PersistStateManager","configureStorage","storage","getKeys","customStorageConfig","storageConfig","configureSerializer","serialize","deserialize","save","onSaveComplete","ReplaySubject","getParams","resolve","setItem","key","_","data","load","keepEntry","onLoadComplete","getItem","loadedState","removeAction","remove","clear","onClearComplete","clearKeys","keys","startsWith","prefix","localParams","forkJoin","onRemoveComplete","removeItem","setDefaultStorage","defaults","localStorage","isPromise","v","then","asyncOrValue","isObservable","from","of","stringify","Observable","Store","lift","operator","err","log","initializeOperators","storeContext","selectStore","HistoryController","history","debugerInfo","onHistoryChange","applyHistory","applyState","targetState","fromUpdate","debugHistoryItem","targetRoute","navigateByUrl","RESTORE_FROM_SERVER","InjectionToken","TRANSFER_STATE_KEY","INITIAL_STATE","NG_STATE_OPTIONS","IS_PROD","IS_TEST","stateFactory","transferState","restoreFromServer","stateKey","makeStateKey","hasKey","storeFactory","historyControllerFactory","routerStateFactory","debugInfoFactory","StoreModule","provideStore","isProd","restoreStateFromServer","ngModule","providers","provide","useValue","useFactory","deps","TransferState","useClass","Router","initStateHistory","ngStateOptions","initDebugger","debugger","enableInitialDebugging","NgModule","args","imports","CommonModule","Injector","Inject","historyController","routerState","debug","publicApi","NgStateTestBed","setTestEnvironment","dependencyInjection","getMockName","name","service","find","k","createStore","Promise","obj","toLowerCase","createActions","actionsType","actions","createTestStore","getPath","setActionsToComponent","component","split","Helpers","guid","s4","Math","floor","random","toString","substring","HasStateActions","ngOnInit","ngOnChanges","changes","ngOnDestroy","Input","cd","stateIndex","ComponentState","stateActions","disableOnChangesBeforeActionsCreated","target","origInit","origDestroy","origOnChanges","ChangeDetectorRef","stateChangeSubscription","aId","markForCheck","onDestroy","InjectStore","newPath","intialState","convertGettersToProperties","targetMethods","Reflect","getPrototypeOf","entries","getOwnPropertyDescriptors","_a","_b","isGetter","method","getAllGetters","forEach","tempGetter","currentPath","extractedPath","transformedPath","nthStatePathIndex","index","getAbsoluteStatePath","getStatePath","dispatcher","that"],"mappings":"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","sourcesContent":["import {Observable, Subject, Subscription} from 'rxjs';\r\nimport { filter, share, map } from 'rxjs/operators';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class Message {\r\n    constructor(public type?: string, public payload?: any) {\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class Dispatcher {\r\n    private subject = new Subject<any>();\r\n\r\n    get observable(): Observable<Message> {\r\n        return this.subject.asObservable();\r\n    }\r\n\r\n    getMessagesOfType(messageType: string): Observable<Message> {\r\n        return this.subject.pipe(filter(msg => msg.type === messageType), share());\r\n    }\r\n\r\n    publish(message: Message): void;\r\n    publish(messageType: string, payload?: any): void;\r\n    publish(message: string | Message, payload?: any): void {\r\n        message = (<Message>message).type !== undefined\r\n            ? message\r\n            : new Message(message as string, payload);\r\n\r\n        this.subject.next(message);\r\n    }\r\n\r\n    subscribe(message: Message, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\r\n    subscribe(messageType: string, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\r\n    subscribe(messageType: string | Message, observerOrNext: (payload: any) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n        messageType = (<Function>messageType).prototype instanceof Message\r\n            ? (new (<any>messageType)() as Message).type\r\n            : messageType;\r\n\r\n        return this.getMessagesOfType(messageType as string)\r\n            .pipe(map(msg =>  msg.payload))\r\n            .subscribe(observerOrNext, error, complete);\r\n    }\r\n}","import { Injector } from '@angular/core';\r\n\r\nexport class ServiceLocator {\r\n    static injector: Injector = null;\r\n}","import { Router, NavigationCancel, NavigationEnd, RoutesRecognized } from '@angular/router';\r\nimport { Store } from '../store/store';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class RouterState {\r\n    static startingRoute = '';\r\n    private dataStrategy: DataStrategy;\r\n\r\n    constructor(private store: Store<any>, private router: Router, private debugInfo: DebugInfo) {\r\n    }\r\n\r\n    init() {\r\n        this.dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n        this.initRouter();\r\n        this.bindRouter();\r\n    }\r\n\r\n    private initRouter() {\r\n        this.router.events\r\n            .pipe(\r\n                filter(event => event instanceof RoutesRecognized),\r\n                take(1)\r\n            )\r\n            .subscribe((event: RoutesRecognized) => {\r\n                this.store.initialize(['router'], { url: event.url }, false);\r\n            });\r\n    }\r\n\r\n    private bindRouter() {\r\n        if (!this.router.events) {\r\n            return;\r\n        }\r\n\r\n        let cancelledId = -1;\r\n        this.router.events\r\n            .pipe(filter(() => this.debugInfo && !this.debugInfo.isTimeTravel))\r\n            .subscribe((event) => {\r\n                if (event instanceof NavigationCancel) {\r\n                    cancelledId = (<NavigationCancel>event).id;\r\n                }\r\n                if (event instanceof NavigationEnd && (<NavigationEnd>event).id !== cancelledId) {\r\n                    (<Store<any>>this.store.select(['router'])).update(state => {\r\n                        this.dataStrategy.set(state, 'url', event.url);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class State<T> extends BehaviorSubject<T> {\r\n  constructor(initialState: T, dataStrategy: DataStrategy) {\r\n    dataStrategy.overrideContructor(initialState);\r\n    super(dataStrategy.fromJS(initialState));\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class StateHistory {\r\n    static initialState = {};\r\n\r\n    private options: StateHistoryOptions = {\r\n        collectHistory: true,\r\n        storeHistoryItems: 100\r\n    };\r\n\r\n    get currentState(): any {\r\n        return StateKeeper.CURRENT_STATE;\r\n    }\r\n\r\n    get history(): any[] {\r\n        return StateKeeper.HISTORY;\r\n    }\r\n\r\n    get storeHistoryItems() {\r\n        return this.options.storeHistoryItems;\r\n    }\r\n\r\n    init(initialState: any) {\r\n        StateHistory.initialState = initialState;\r\n    }\r\n\r\n    changeDefaults(options: StateHistoryOptions) {\r\n        this.options = { ...this.options, ...options };\r\n    }\r\n\r\n    setCurrentState(state: any) {\r\n        StateKeeper.CURRENT_STATE = state;\r\n    }\r\n\r\n    add(item: HistoryItem) {\r\n        if (!this.options.collectHistory) {\r\n            return;\r\n        }\r\n\r\n        if (StateKeeper.HISTORY.length >= this.options.storeHistoryItems) {\r\n            StateKeeper.HISTORY.shift();\r\n        }\r\n\r\n        StateKeeper.HISTORY.push(item);\r\n    }\r\n}\r\n\r\nexport class StateKeeper {\r\n    static CURRENT_STATE: any = null;\r\n    static HISTORY = [];\r\n}\r\n\r\nexport interface StateHistoryOptions {\r\n    collectHistory?: boolean;\r\n    storeHistoryItems?: number | null;\r\n}\r\n\r\nexport interface HistoryItem {\r\n    message: string;\r\n    state: any;\r\n}","import { Store } from './store';\r\nimport { map, distinctUntilChanged, takeWhile } from 'rxjs/operators';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Select {\r\n    constructor(path: any) {\r\n        let mapped$;\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n        if (typeof path === 'object') {\r\n            mapped$ = (<any>this).pipe(\r\n                map((state: any) => dataStrategy.getIn(state, path)),\r\n                takeWhile((state: any) => state !== undefined),\r\n                distinctUntilChanged()\r\n            );\r\n        }\r\n        else {\r\n            throw new TypeError(`Unexpected type ${typeof path} in select operator,`\r\n                + ` expected 'object' or 'function'`);\r\n        }\r\n\r\n        return mapped$;\r\n    }\r\n}\r\n\r\nexport interface SelectSignature {\r\n  (path: any[]): Store<any>;\r\n}","import { DebugInfoData } from './debug-info-data';\r\nimport { StateHistory } from '../state/history';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\n@Injectable()\r\nexport class DebugInfo {\r\n    private debugInfo: DebugInfoData = null;\r\n    private debugMode: boolean;\r\n    private withDevTools: boolean;\r\n    private debugStatePath: any[] = null;\r\n    private devTools = null;\r\n    private devToolsSubscription = null;\r\n    private options: DebugOptions = {\r\n        enableConsoleOutput: true,\r\n        enableDevToolsOutput: true\r\n    };\r\n\r\n    static instance: DebugInfo = null;\r\n\r\n    isTimeTravel = false;\r\n    onApplyHistory = new Subject<DebugHistoryItem>();\r\n\r\n    constructor(private stateHistory: StateHistory, private zone: NgZone, private dataStrategy: DataStrategy) {\r\n    }\r\n\r\n    get publicApi() {\r\n        return {\r\n            start: this.start,\r\n            stop: this.stop\r\n        };\r\n    }\r\n\r\n    get isDebugMode() {\r\n        return this.debugMode;\r\n    }\r\n\r\n    init(debugMode: boolean) {\r\n        this.debugMode = debugMode;\r\n        this.setWithDevTools();\r\n\r\n        if (!this.withDevTools || !debugMode) {\r\n            return;\r\n        }\r\n\r\n        this.trackWithDevTools([]);\r\n    }\r\n\r\n    changeDefaults(options: DebugOptions) {\r\n        this.options = { ...this.options, ...options };\r\n    }\r\n\r\n    add(info: DebugInfoData) {\r\n        if (this.debugMode) {\r\n            this.debugInfo = { ...info };\r\n        }\r\n    }\r\n\r\n    onStateChange(state: any, isIntialState: boolean) {\r\n        if (this.debugMode && !this.isTimeTravel) {\r\n            this.logDebugInfo(state, isIntialState);\r\n        }\r\n    }\r\n\r\n    turnOnTimeTravel() {\r\n        this.isTimeTravel = true;\r\n    }\r\n\r\n    turnOffTimeTravel() {\r\n        this.isTimeTravel = false;\r\n    }\r\n\r\n    private logDebugInfo(state: any, isIntialState: boolean) {\r\n        let debugState = this.debugStatePath && this.dataStrategy.getIn(state, this.debugStatePath) || state;\r\n        if (this.dataStrategy.isObject(debugState)) {\r\n            debugState = this.dataStrategy.toJS(debugState);\r\n        }\r\n\r\n        const debugMessage = this.getDebugMessage();\r\n        this.consoleLog(debugMessage, debugState);\r\n\r\n        if (!this.withDevTools) {\r\n            return;\r\n        }\r\n\r\n        if (isIntialState) {\r\n            this.devTools.init(debugState);\r\n        } else {\r\n            this.devTools.send(debugMessage, debugState);\r\n        }\r\n\r\n        this.stateHistory.add({ message: debugMessage, state: debugState });\r\n\r\n        this.debugInfo = null;\r\n    }\r\n\r\n    private consoleLog(message: string, state: any) {\r\n        if (this.options.enableConsoleOutput) {\r\n            console.info(message, state);\r\n        }\r\n    }\r\n\r\n    private getDebugMessage() {\r\n        let message = '@state/';\r\n\r\n        if (!this.debugInfo) {\r\n            return `${message}${this.getDebugStatePath()}`;\r\n        }\r\n\r\n        message += `${this.debugInfo.statePath.join('/')} - `;\r\n        message += `${(this.debugInfo.message ? this.debugInfo.message.toUpperCase() : (this.debugInfo.actionType || ''))}`;\r\n\r\n        return message;\r\n    }\r\n\r\n    private getDebugStatePath() {\r\n        return this.debugStatePath && this.debugStatePath.length > 0\r\n            ? this.debugStatePath.join('->')\r\n            : 'root';\r\n    }\r\n\r\n    private trackWithDevTools(statePath: any[]) {\r\n        if (!this.withDevTools || this.devTools) {\r\n            return;\r\n        }\r\n\r\n        this.zone.run(() => {\r\n            this.devTools = window['__REDUX_DEVTOOLS_EXTENSION__'].connect({ maxAge: this.stateHistory.storeHistoryItems });\r\n        });\r\n\r\n        this.devToolsSubscription = this.devTools.subscribe((message: any) => {\r\n            if (message.type === 'DISPATCH' && (message.payload.type === 'JUMP_TO_ACTION' || message.payload.type === 'JUMP_TO_STATE')) {\r\n                this.onApplyHistory.next({\r\n                    state: this.dataStrategy.fromJS(JSON.parse(message.state)),\r\n                    statePath: statePath\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private stopTrackingWithDevTools() {\r\n        if (this.withDevTools) {\r\n            this.withDevTools = false;\r\n            window['__REDUX_DEVTOOLS_EXTENSION__'].disconnect();\r\n            this.devToolsSubscription();\r\n            this.devTools = null;\r\n        }\r\n    }\r\n\r\n    private setWithDevTools() {\r\n        this.withDevTools = this.options.enableDevToolsOutput && typeof window !== 'undefined' && !!window['__REDUX_DEVTOOLS_EXTENSION__'];\r\n    }\r\n\r\n    private start = (statePath: any[] = []) => {\r\n        this.debugStatePath = statePath;\r\n        this.debugMode = true;\r\n\r\n        this.stopTrackingWithDevTools();\r\n        this.setWithDevTools();\r\n        this.trackWithDevTools(statePath);\r\n        this.onStateChange(this.stateHistory.currentState, true);\r\n    }\r\n\r\n    private stop = () => {\r\n        this.debugMode = false;\r\n        this.stopTrackingWithDevTools();\r\n    }\r\n}\r\n\r\nexport interface DebugOptions {\r\n    enableConsoleOutput?: boolean;\r\n    enableDevToolsOutput?: boolean;\r\n}\r\n\r\nexport interface DebugHistoryItem {\r\n    state: any;\r\n    statePath: any[];\r\n}","import { ActionType, DebugInfoData } from '../debug/debug-info-data';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Update {\r\n    constructor(action: (state: any) => void, debugInfo: DebugInfoData = {}) {\r\n\r\n        const defaultDebugInfo = { actionType: ActionType.Update, statePath: (<any>this).statePath };\r\n        DebugInfo.instance.add({ ...defaultDebugInfo, ...debugInfo });\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n\r\n        try {\r\n            dataStrategy.update((this as any).statePath, action);\r\n        } catch (exception) {\r\n            console.error(exception);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UpdateSignature<T> {\r\n    (action: (state: T) => void, debugInfo?: DebugInfoData): void;\r\n}","import { Helpers } from '../helpers/helpers';\r\nimport { tap, take } from 'rxjs/operators';\r\nimport { Store } from './store';\r\nimport { ActionType } from '../debug/debug-info-data';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class Initialize {\r\n    newStore: Store<any>;\r\n\r\n    constructor(statePath: any[], initialState: any = null) {\r\n        const initialized = '__initialized';\r\n\r\n        let actionWrapper = function (state: any) {\r\n            const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n            if (dataStrategy.getIn(state, [...statePath, initialized])) {\r\n                return;\r\n            }\r\n\r\n            dataStrategy.overrideContructor(initialState);\r\n            initialState.constructor = Object;\r\n            initialState = dataStrategy.fromJS(initialState);\r\n            initialState = dataStrategy.set(initialState, initialized, true);\r\n\r\n            let newState;\r\n\r\n            try {\r\n                newState = dataStrategy.setIn(state, statePath, initialState);\r\n                this.newStore = (<any>this).select(statePath);\r\n                this.newStore.initialState = initialState;\r\n                this.newStore.rootPath = statePath;\r\n            } catch (exception) {\r\n                console.error(exception);\r\n            }\r\n\r\n            (<any>this).source.next(newState);\r\n        }.bind(this);\r\n\r\n        const defaultDebugInfo = { actionType: ActionType.Initialize, statePath: statePath };\r\n        DebugInfo.instance.add(defaultDebugInfo);\r\n\r\n        (<any>this).pipe(\r\n            tap(actionWrapper),\r\n            take(1)\r\n        ).subscribe();\r\n\r\n        return this.newStore as any;\r\n    }\r\n}\r\n\r\nexport interface InitializeSignature<T> {\r\n    <R>(statePath, initialState?: T, addToHistory?: boolean): Store<R>;\r\n}","import { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class Map<T, R> {\r\n    constructor(action: (state: any) => Observable<R>) {\r\n        return (<any>this).pipe(map((state: any) => action(state)));\r\n    }\r\n}\r\n\r\nexport interface MapSgnature<T> {\r\n    <R>(action: (state: T) => R): Observable<R>;\r\n}","import { Store } from './store';\r\nimport { StateKeeper, StateHistory } from '../state/history';\r\nimport { ActionType } from '../debug/debug-info-data';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\nimport { DebugInfo } from '../debug/debug-info';\r\nimport { RouterState } from '../state/router-state';\r\n\r\nexport class Reset {\r\n    constructor(debugMessage: string = null) {\r\n\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n\r\n        const restoreState = function (store: Store<any>) {\r\n            let path = store.statePath.filter(item => !store.rootPath.includes(item));\r\n            const isRootPath = Array.isArray(path) && path.length === 0;\r\n            if (isRootPath) {\r\n                dataStrategy.resetRoot(StateHistory.initialState, RouterState.startingRoute);\r\n            } else {\r\n                let initialState: any = !!store.initialState\r\n                    ? store.initialState\r\n                    : dataStrategy.fromJS(StateHistory.initialState);\r\n\r\n                initialState = dataStrategy.getIn(initialState, (path));\r\n\r\n                dataStrategy.reset(store.statePath, initialState);\r\n            }\r\n\r\n            const defaultDebugInfo = { actionType: ActionType.Reset, statePath: path, debugMessage: debugMessage };\r\n            DebugInfo.instance.add(defaultDebugInfo);\r\n        };\r\n\r\n        if (!dataStrategy.isObject(dataStrategy.getIn(StateKeeper.CURRENT_STATE, ((this as any).statePath)))) {\r\n            throw new Error(`Cannot resotre state at path: ${(this as any).statePath}. Maybe you are trying to restore value rather then state.`);\r\n        }\r\n\r\n        restoreState((this as any));\r\n    }\r\n}\r\n\r\nexport interface ResetSignature {\r\n    <R>(debugMessage?: string): void;\r\n}","import { distinctUntilChanged, debounceTime, takeUntil, take } from 'rxjs/operators';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Store } from '../store';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\nimport { ServiceLocator } from '../../helpers/service-locator';\r\n\r\nexport class NgFormStateManager {\r\n\r\n    private unsubscribe = new Subject();\r\n    private form: FormGroupLike;\r\n    private params: NgFormStateManagerParams;\r\n    private store: Store<any>;\r\n    private dataStrategy: DataStrategy;\r\n\r\n    private onChangeFn: (state: any) => void;\r\n    private shouldUpdateStateFn: (params: ShoulUpdateStateParams) => boolean;\r\n\r\n    constructor(store: Store<any>) {\r\n        this.store = store;\r\n    }\r\n\r\n    bind(form: FormGroupLike, params: NgFormStateManagerParams = {}): NgFormStateManager {\r\n        this.dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n        this.form = form;\r\n        this.params = { ... { debounceTime: 100, emitEvent: false }, ...params };\r\n        this.setInitialValue();\r\n        this.subscribeToFormChange();\r\n\r\n        return this;\r\n    }\r\n\r\n    reset() {\r\n        this.store.reset();\r\n    }\r\n\r\n    destroy() {\r\n        this.unsubscribe.next(true);\r\n        this.unsubscribe.complete();\r\n\r\n        this.form = null;\r\n        this.store = null;\r\n        this.onChangeFn = null;\r\n        this.shouldUpdateStateFn = null;\r\n    }\r\n\r\n    onChange(onChangeFn: (state: any) => void) {\r\n        this.onChangeFn = onChangeFn;\r\n        return this;\r\n    }\r\n\r\n    shouldUpdateState(shouldUpdateStateFn: (params: ShoulUpdateStateParams) => boolean) {\r\n        this.shouldUpdateStateFn = shouldUpdateStateFn;\r\n        return this;\r\n    }\r\n\r\n    private setInitialValue() {\r\n        this.store\r\n            .pipe(\r\n                distinctUntilChanged(),\r\n                takeUntil(this.unsubscribe)\r\n            )\r\n            .subscribe((state: any) => {\r\n                this.form.patchValue(this.dataStrategy.toJS(state), { emitEvent: this.params.emitEvent });\r\n            });\r\n    }\r\n\r\n    private subscribeToFormChange() {\r\n\r\n        this.form.valueChanges\r\n            .pipe(\r\n                debounceTime(this.params.debounceTime),\r\n                distinctUntilChanged(),\r\n                takeUntil(this.unsubscribe)\r\n            )\r\n            .subscribe(value => {\r\n                let stateUpdated = false;\r\n\r\n                this.store.update((state: any) => {\r\n                    stateUpdated = this.executeUpdate(value, state);\r\n                });\r\n\r\n                if (stateUpdated) {\r\n                    this.onChangeCall();\r\n                }\r\n            });\r\n    }\r\n\r\n    private executeUpdate(value: any, state: any): boolean {\r\n        if (this.shouldUpdateStateFn) {\r\n            if (this.shouldUpdateStateFn({\r\n                form: this.form,\r\n                state: state,\r\n                value: value\r\n            })) {\r\n                this.dataStrategy.merge(state, this.dataStrategy.fromJS(value));\r\n                return true;\r\n            }\r\n        } else {\r\n            this.dataStrategy.merge(state, this.dataStrategy.fromJS(value));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private onChangeCall() {\r\n        if (this.onChangeFn) {\r\n            this.store\r\n                .pipe(take(1))\r\n                .subscribe(state => {\r\n                    this.onChangeFn(this.dataStrategy.toJS(state));\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport type FormGroupLike = {\r\n    patchValue: Function;\r\n    setValue: Function;\r\n    value: any;\r\n    get: Function;\r\n    valueChanges: Observable<any>;\r\n    controls: any;\r\n};\r\n\r\nexport type NgFormStateManagerParams = {\r\n    debounceTime?: number;\r\n    emitEvent?: boolean;\r\n};\r\n\r\nexport interface ShoulUpdateStateParams {\r\n    form: FormGroupLike;\r\n    state: any;\r\n    value: any;\r\n}","import { tap, take } from 'rxjs/operators';\r\nimport { Store } from '../store';\r\nimport { Observable, isObservable, from, of, ReplaySubject, forkJoin } from 'rxjs';\r\nimport { ServiceLocator } from '../../helpers/service-locator';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class PersistStateManager {\r\n    private prefix = 'state::';\r\n\r\n    protected static customStorageConfig: PersistStateParams = {};\r\n\r\n    protected defaults: PersistStateParams = {\r\n        key: '',\r\n        storageConfig: null,\r\n        deserialize: JSON.parse,\r\n        serialize: JSON.stringify\r\n    };\r\n\r\n    constructor(private store: Store<any>) {\r\n    }\r\n\r\n    static configureStorage(storage: PersistStateStorage, getKeys: () => Promise<string[]> | Observable<string[]> | string[]) {\r\n        PersistStateManager.customStorageConfig.storageConfig = { storage: storage, getKeys: getKeys };\r\n    }\r\n\r\n    static configureSerializer(serialize: Function, deserialize: Function) {\r\n        PersistStateManager.customStorageConfig.serialize = serialize;\r\n        PersistStateManager.customStorageConfig.deserialize = deserialize;\r\n    }\r\n\r\n    save(params?: PersistStateParams): Observable<PersistStateItem> {\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n        const onSaveComplete = new ReplaySubject<PersistStateItem>(1);\r\n\r\n        params = this.getParams(params, this.store);\r\n\r\n        this.store.pipe(\r\n            tap((state: any) => {\r\n                this.resolve(params.storageConfig.storage.setItem(params.key, params.serialize(dataStrategy.toJS(state))))\r\n                    .pipe(take(1))\r\n                    .subscribe(_ => {\r\n                        onSaveComplete.next({\r\n                            key: params.key,\r\n                            data: dataStrategy.toJS(state)\r\n                        });\r\n                    });\r\n            }),\r\n            take(1)\r\n        ).subscribe();\r\n\r\n        return onSaveComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    load(params?: PersistStateParams, keepEntry = false): Observable<PersistStateItem> {\r\n        const dataStrategy = ServiceLocator.injector.get(DataStrategy) as DataStrategy;\r\n        const onLoadComplete = new ReplaySubject<PersistStateItem>(1);\r\n\r\n        params = this.getParams(params, this.store);\r\n        this.resolve(params.storageConfig.storage.getItem(params.key))\r\n            .pipe(take(1))\r\n            .subscribe(loadedState => {\r\n                this.store.update((state: Map<any, any>) => {\r\n                    dataStrategy.merge(state, dataStrategy.fromJS(params.deserialize(loadedState)));\r\n                });\r\n\r\n                if (!keepEntry) {\r\n                    this.removeAction(params);\r\n                }\r\n\r\n                onLoadComplete.next({\r\n                    key: params.key,\r\n                    data: loadedState\r\n                });\r\n            });\r\n\r\n        return onLoadComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    remove(params?: PersistStateParams): Observable<string> {\r\n        params = this.getParams(params, this.store);\r\n        return this.removeAction(params);\r\n    }\r\n\r\n    clear(params?: PersistStateParams): Observable<string[]> {\r\n        const onClearComplete = new ReplaySubject<string[]>(1);\r\n        const clearKeys: Observable<string>[] = [];\r\n\r\n        params = this.getParams(params, this.store);\r\n\r\n        this.resolve(params.storageConfig.getKeys())\r\n            .pipe(take(1))\r\n            .subscribe(keys => {\r\n                keys.filter((e: string) => e.startsWith(this.prefix))\r\n                    .map((key: string) => {\r\n                        const localParams = { ...params };\r\n                        localParams.key = key;\r\n\r\n                        clearKeys.push(this.removeAction(localParams));\r\n                    });\r\n\r\n                forkJoin(clearKeys)\r\n                    .pipe(take(1))\r\n                    .subscribe(keys => {\r\n                        onClearComplete.next(keys);\r\n                    });\r\n            });\r\n\r\n        return onClearComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    private removeAction(params: PersistStateParams): Observable<string> {\r\n        const onRemoveComplete = new ReplaySubject<string>(1);\r\n\r\n        this.resolve(params.storageConfig.storage.removeItem(params.key))\r\n            .pipe(take(1))\r\n            .subscribe(_ => {\r\n                onRemoveComplete.next(params.key);\r\n            });\r\n\r\n        return onRemoveComplete\r\n            .asObservable()\r\n            .pipe(take(1));\r\n    }\r\n\r\n    private getParams(params: PersistStateParams, store: Store<any>) {\r\n        this.setDefaultStorage();\r\n\r\n        params = { ...this.defaults, ...PersistStateManager.customStorageConfig, ...params };\r\n\r\n        if (!params.key) {\r\n            params.key = store.statePath.join('.');\r\n        }\r\n\r\n        params.key = `${this.prefix}${params.key}`;\r\n\r\n        return params;\r\n    }\r\n\r\n    private setDefaultStorage() {\r\n        if (!this.defaults.storageConfig) {\r\n            this.defaults.storageConfig = {\r\n                storage: localStorage,\r\n                getKeys: () => Object.keys(localStorage)\r\n            };\r\n        }\r\n    }\r\n\r\n    private isPromise(v: any) {\r\n        return v && typeof v.then === 'function';\r\n    }\r\n\r\n    private resolve(asyncOrValue: any) {\r\n        if (this.isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\r\n            return from(asyncOrValue);\r\n        }\r\n\r\n        return of(asyncOrValue);\r\n    }\r\n}\r\n\r\nexport interface PersistStateStorage {\r\n    getItem(key: string): Promise<any> | Observable<any> | any;\r\n    setItem(key: string, value: any): Promise<any> | Observable<any> | any;\r\n    removeItem(key: string): Promise<any> | Observable<any> | any;\r\n    clear(): void;\r\n}\r\n\r\nexport interface PersistStateParams {\r\n    key?: string;\r\n    storageConfig?: StorageConfiguartion;\r\n    deserialize?: Function;\r\n    serialize?: Function;\r\n}\r\n\r\nexport interface StorageConfiguartion {\r\n    storage: PersistStateStorage;\r\n    getKeys: () => Promise<string[]> | Observable<string[]> | string[];\r\n}\r\n\r\nexport interface PersistStateItem {\r\n    key: string;\r\n    data: any;\r\n}","import { Select, SelectSignature } from './select';\r\nimport { Update, UpdateSignature } from './update';\r\nimport { Initialize, InitializeSignature } from './initialize';\r\nimport { Operator, Observable, Observer } from 'rxjs';\r\nimport { MapSgnature, Map } from './map';\r\nimport { ResetSignature, Reset } from './reset';\r\nimport { NgFormStateManager } from './plugins/form-manager.plugin';\r\nimport { PersistStateManager } from './plugins/persist-state.plugin';\r\n\r\nexport class Store<T> extends Observable<T> implements Observer<any> {\r\n    statePath: any[] = [];\r\n    rootPath: any[] = [];\r\n    initialState: any;\r\n\r\n    update: UpdateSignature<T>;\r\n    initialize: InitializeSignature<T>;\r\n    map: MapSgnature<T>;\r\n    reset: ResetSignature;\r\n\r\n    form: NgFormStateManager;\r\n    storage: PersistStateManager;\r\n\r\n    constructor(state: Observable<any>) {\r\n        super();\r\n\r\n        this.source = state;\r\n        this.initializeOperators(this);\r\n    }\r\n\r\n    select: SelectSignature = (statePath: string[]): Store<T> => {\r\n        let selectStore = Select.bind(this).call(this, statePath);\r\n        selectStore.statePath = [...this.statePath, ...statePath];\r\n        selectStore.rootPath = this.rootPath;\r\n        selectStore.initialState = this.initialState;\r\n        this.initializeOperators(selectStore);\r\n        return selectStore;\r\n    }\r\n\r\n    lift<R>(operator: Operator<T, R>): Store<R> {\r\n        const store = new Store<R>(this);\r\n        store.operator = operator;\r\n        return store;\r\n    }\r\n\r\n    error(err: any) {\r\n        console.log(err);\r\n    }\r\n\r\n    next(state: any) {\r\n        (<any>this.source).next(state);\r\n    }\r\n\r\n    complete() {\r\n    }\r\n\r\n    initializeOperators(storeContext: Store<T>) {\r\n        storeContext.update = Update.bind(storeContext);\r\n        storeContext.initialize = Initialize.bind(storeContext);\r\n        storeContext.reset = Reset.bind(storeContext);\r\n        storeContext.map = Map.bind(storeContext);\r\n        storeContext.form = new NgFormStateManager(storeContext);\r\n        storeContext.storage = new PersistStateManager(storeContext);\r\n    }\r\n}","import { Store } from '../store/store';\r\nimport { StateHistory } from './history';\r\nimport { Subject } from 'rxjs';\r\nimport { DebugInfo, DebugHistoryItem } from '../debug/debug-info';\r\nimport { Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class HistoryController {\r\n    private onHistoryChange = new Subject();\r\n\r\n    constructor(private store: Store<any>, private history: StateHistory, private debugerInfo: DebugInfo, private router: Router, private dataStrategy: DataStrategy) {\r\n    }\r\n\r\n    init() {\r\n        this.store.subscribe(state => {\r\n            const isIntialState = !this.history.currentState;\r\n\r\n            this.history.setCurrentState(state);\r\n            this.debugerInfo.onStateChange(state, isIntialState);\r\n            this.onHistoryChange.next(true);\r\n        });\r\n\r\n        this.debugerInfo.onApplyHistory.subscribe(this.applyHistory);\r\n    }\r\n\r\n    private applyHistory = (debugHistoryItem: DebugHistoryItem) => {\r\n        this.debugerInfo.turnOnTimeTravel();\r\n\r\n        const targetRoute = this.dataStrategy.getIn(debugHistoryItem.state, ['router', 'url']);\r\n        if (targetRoute && this.router.url !== targetRoute) {\r\n            this.router.navigateByUrl(targetRoute).then(_ => {\r\n                this.applyState(debugHistoryItem.state, debugHistoryItem.statePath);\r\n            });\r\n        } else {\r\n            this.applyState(debugHistoryItem.state, debugHistoryItem.statePath);\r\n        }\r\n\r\n        this.onHistoryChange\r\n            .pipe(take(1))\r\n            .subscribe(_ => {\r\n                this.debugerInfo.turnOffTimeTravel();\r\n            });\r\n    }\r\n\r\n    private applyState(targetState: any, statePath: string[]) {\r\n        if (statePath.length === 0) {\r\n            this.store.next(targetState);\r\n        } else {\r\n            this.store\r\n                .update((state: any) => {\r\n                    this.dataStrategy.setIn(state, statePath, targetState, { fromUpdate: true });\r\n                });\r\n        }\r\n    }\r\n}","import { Inject, Injector, ModuleWithProviders, NgModule, InjectionToken, NgZone } from '@angular/core';\r\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Dispatcher } from './services/dispatcher';\r\nimport { Router } from '@angular/router';\r\nimport { RouterState } from './state/router-state';\r\nimport { ServiceLocator } from './helpers/service-locator';\r\nimport { State } from './state/state';\r\nimport { StateHistory, StateHistoryOptions, StateKeeper } from './state/history';\r\nimport { Store } from './store/store';\r\nimport { HistoryController } from './state/history-controller';\r\nimport { DebugInfo, DebugOptions } from './debug/debug-info';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport const RESTORE_FROM_SERVER = new InjectionToken('RESTORE_FROM_SERVER');\r\nexport const TRANSFER_STATE_KEY = 'state';\r\nexport const INITIAL_STATE = new InjectionToken('INITIAL_STATE');\r\nexport const NG_STATE_OPTIONS = new InjectionToken('NG_STATE_OPTIONS');\r\nexport const IS_PROD = new InjectionToken('IS_PROD');\r\nexport const IS_TEST = new InjectionToken('IS_TEST');\r\n\r\nexport function stateFactory(initialState, dataStrategy: DataStrategy, transferState?: TransferState, restoreFromServer?: boolean) {\r\n    if (transferState && restoreFromServer) {\r\n        const stateKey = makeStateKey<any>(TRANSFER_STATE_KEY);\r\n        if (transferState.hasKey(stateKey)) {\r\n            initialState = transferState.get(stateKey, initialState);\r\n        }\r\n    }\r\n\r\n    return new State(initialState, dataStrategy);\r\n}\r\n\r\nexport function storeFactory(state: State<any>) {\r\n    return new Store(state);\r\n}\r\n\r\nexport function historyControllerFactory(store: Store<any>, history: StateHistory, debugerInfo: DebugInfo, router: Router, dataStrategy: DataStrategy) {\r\n    return new HistoryController(store, history, debugerInfo, router, dataStrategy);\r\n}\r\n\r\nexport function routerStateFactory(store: Store<any>, router: Router, debugerInfo: DebugInfo) {\r\n    return new RouterState(store, router, debugerInfo);\r\n}\r\n\r\nexport function debugInfoFactory(history: StateHistory, zone: NgZone, dataStrategy: DataStrategy) {\r\n    return new DebugInfo(history, zone, dataStrategy);\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule]\r\n})\r\nexport class StoreModule {\r\n    static provideStore(initialState: any, isProd?: boolean, options: NgStateOptions = {}, restoreStateFromServer?: boolean): ModuleWithProviders {\r\n        return {\r\n            ngModule: StoreModule,\r\n            providers: [\r\n                { provide: NG_STATE_OPTIONS, useValue: options },\r\n                { provide: INITIAL_STATE, useValue: initialState },\r\n                { provide: IS_PROD, useValue: isProd },\r\n                { provide: IS_TEST, useValue: false },\r\n                { provide: RESTORE_FROM_SERVER, useValue: restoreStateFromServer },\r\n                { provide: State, useFactory: stateFactory, deps: [INITIAL_STATE, DataStrategy, TransferState, RESTORE_FROM_SERVER] },\r\n                { provide: Store, useFactory: storeFactory, deps: [State] },\r\n                { provide: StateHistory, useClass: StateHistory },\r\n                { provide: DebugInfo, useFactory: debugInfoFactory, deps: [StateHistory, NgZone, DataStrategy] },\r\n                { provide: HistoryController, useFactory: historyControllerFactory, deps: [Store, StateHistory, DebugInfo, Router, DataStrategy] },\r\n                { provide: RouterState, useFactory: routerStateFactory, deps: [Store, Router, DebugInfo] },\r\n                Dispatcher\r\n            ]\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        private stateHistory: StateHistory,\r\n        private debugInfo: DebugInfo,\r\n        injector: Injector,\r\n        historyController: HistoryController,\r\n        routerState: RouterState,\r\n        dataStrategy: DataStrategy,\r\n        store: Store<any>,\r\n        @Inject(INITIAL_STATE) initialState: any,\r\n        @Inject(NG_STATE_OPTIONS) ngStateOptions: any,\r\n        @Inject(IS_PROD) isProd: any\r\n    ) {\r\n        ServiceLocator.injector = injector;\r\n        this.initStateHistory(initialState, ngStateOptions);\r\n        this.initDebugger(ngStateOptions);\r\n        historyController.init();\r\n\r\n        routerState.init();\r\n\r\n        // if (!isProd) {\r\n            (<any>window).state = {\r\n                history: StateKeeper,\r\n                debug: debugInfo.publicApi\r\n            };\r\n        // }\r\n\r\n        dataStrategy.init(store, isProd);\r\n    }\r\n\r\n    private initStateHistory(initialState: any, ngStateOptions: NgStateOptions) {\r\n        if (ngStateOptions && ngStateOptions.history) {\r\n            this.stateHistory.changeDefaults(ngStateOptions.history);\r\n        }\r\n\r\n        this.stateHistory.init(initialState);\r\n    }\r\n\r\n    private initDebugger(ngStateOptions: NgStateOptions) {\r\n        DebugInfo.instance = this.debugInfo;\r\n\r\n        if (!ngStateOptions || !ngStateOptions.debugger) {\r\n            return;\r\n        }\r\n\r\n        if (ngStateOptions.debugger.options) {\r\n            this.debugInfo.changeDefaults(ngStateOptions.debugger.options);\r\n        }\r\n\r\n        if (ngStateOptions.debugger.enableInitialDebugging) {\r\n            this.debugInfo.init(true);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface NgStateOptions {\r\n    history?: StateHistoryOptions;\r\n    debugger?: {\r\n        enableInitialDebugging?: boolean;\r\n        options?: DebugOptions;\r\n    };\r\n}","import { ServiceLocator } from './helpers/service-locator';\r\nimport { IS_TEST, stateFactory, storeFactory } from './ng-state.module';\r\nimport { StateHistory } from './state/history';\r\nimport { Store } from './store/store';\r\nimport { HistoryController } from './state/history-controller';\r\nimport { DebugInfo } from './debug/debug-info';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport class NgStateTestBed {\r\n\r\n    private static dataStrategy: DataStrategy = null;\r\n    private static dependencyInjection = <{ key: any, value: any }[]>[];\r\n\r\n    public static setTestEnvironment(dataStrategy: DataStrategy) {\r\n        this.dependencyInjection = [];\r\n        this.dependencyInjection.push({ key: this.getMockName(IS_TEST), value: true });\r\n        this.dependencyInjection.push({ key: this.getMockName(DataStrategy), value: dataStrategy });\r\n\r\n        ServiceLocator.injector = {\r\n            get: (key: any) => {\r\n                const name = this.getMockName(key);\r\n                const service = this.dependencyInjection.find(k => k.key === name);\r\n                if (!service) {\r\n                    throw new Error(`Mock is not found for: ${key}`);\r\n                }\r\n\r\n                return service.value;\r\n            }\r\n        };\r\n\r\n        this.dataStrategy = dataStrategy;\r\n    }\r\n\r\n    public static createStore(initialState: any): Store<any> {\r\n        const state = stateFactory(initialState, this.dataStrategy);\r\n        const store = storeFactory(state);\r\n        this.dataStrategy.init(store, false);\r\n\r\n        const stateHistory = new StateHistory();\r\n        stateHistory.init(initialState);\r\n        const debugInfo = new DebugInfo(stateHistory, { run: () => { } } as any, this.dataStrategy);\r\n        DebugInfo.instance = debugInfo;\r\n        const historyController = new HistoryController(\r\n            store,\r\n            stateHistory,\r\n            debugInfo,\r\n            { navigateByUrl: () => new Promise(() => { }) } as any,\r\n            this.dataStrategy);\r\n        historyController.init();\r\n\r\n        this.dependencyInjection.push({ key: this.getMockName(Store), value: store });\r\n        return store;\r\n    }\r\n\r\n    private static getMockName(obj: any) {\r\n        if (obj === IS_TEST) {\r\n            return 'IS_TEST';\r\n        }\r\n\r\n        if (obj.constructor.name.toLowerCase() !== 'function') {\r\n            return obj.constructor.name;\r\n        }\r\n\r\n        return obj.prototype.constructor.name;\r\n    }\r\n\r\n    public static createActions<T>(actionsType: any, initialState: any = {}, path: string | any[] = []): T {\r\n        this.createStore(initialState);\r\n        const actions = new (actionsType as any)();\r\n        actions.createTestStore(NgStateTestBed.getPath(path));\r\n\r\n        return actions;\r\n    }\r\n\r\n    public static setActionsToComponent(actions: any, component: any) {\r\n        (<any>component).actions = actions;\r\n    }\r\n\r\n    private static getPath(path: string | string[]) {\r\n        if (path instanceof Array) {\r\n            return path;\r\n        }\r\n\r\n        path = path.split('/');\r\n        return path;\r\n    }\r\n}","export class Helpers {\r\n    static guid() {\r\n        const s4 = () => {\r\n          return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n        };\r\n\r\n        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();\r\n      }\r\n}","import { ServiceLocator } from '../helpers/service-locator';\r\nimport { ChangeDetectorRef, Input, OnDestroy, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { IS_PROD, IS_TEST } from '../ng-state.module';\r\nimport { Dispatcher } from '../services/dispatcher';\r\n\r\nexport function ComponentState(stateActions: any | ((T) => any), disableOnChangesBeforeActionsCreated = true) {\r\n    return (target: any) => {\r\n\r\n        let origInit = target.prototype.ngOnInit || (() => { });\r\n        let origDestroy = target.prototype.ngOnDestroy || (() => { });\r\n        let origOnChanges = target.prototype.ngOnChanges || (() => { });\r\n\r\n        const ensureMarkForCheck = function() {\r\n            if (!this.cd) {\r\n                this.cd = ServiceLocator.injector.get(ChangeDetectorRef);\r\n            }\r\n        };\r\n\r\n        target.prototype.ngOnChanges = function (changes) {\r\n            if (disableOnChangesBeforeActionsCreated && !this.actions) {\r\n                return;\r\n            }\r\n\r\n            origOnChanges.apply(this, arguments);\r\n        };\r\n\r\n        target.prototype.ngOnInit = function () {\r\n            const isTest = ServiceLocator.injector.get(IS_TEST);\r\n            if (isTest) {\r\n                origInit.apply(this, arguments);\r\n                return;\r\n            }\r\n\r\n            if (!this.statePath) {\r\n                this.statePath = [];\r\n            }\r\n\r\n            if (stateActions) {\r\n                ensureMarkForCheck.apply(this);\r\n\r\n                // DOC - CONVETION: only annonymous function allwed for choosing state; Actions can be only named functions;\r\n                const extractedStateAction = stateActions.name === ''\r\n                    ? stateActions(this)\r\n                    : stateActions;\r\n\r\n                const actions = new extractedStateAction();\r\n                this.statePath = actions.createStore(this.statePath, this.stateIndex);\r\n\r\n                this.stateChangeSubscription = ServiceLocator.injector.get(Dispatcher)\r\n                    .subscribe(actions.aId, () => {\r\n                        this.cd.markForCheck();\r\n                    });\r\n\r\n                this.actions = actions;\r\n            }\r\n\r\n            origInit.apply(this, arguments);\r\n        };\r\n\r\n        target.prototype.ngOnDestroy = function () {\r\n            if (this.actions) {\r\n                this.actions.onDestroy();\r\n            }\r\n\r\n            if (this.stateChangeSubscription) {\r\n                this.stateChangeSubscription.unsubscribe();\r\n            }\r\n\r\n            origDestroy.apply(this, arguments);\r\n        };\r\n    };\r\n}\r\n\r\nexport class HasStateActions<T> implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() statePath: any;\r\n    @Input() stateIndex?: string | number = null;\r\n\r\n    readonly actions: T;\r\n    readonly cd: ChangeDetectorRef;\r\n\r\n    constructor(cd: ChangeDetectorRef) {\r\n        this.cd = cd;\r\n    }\r\n\r\n    ngOnInit(): void { }\r\n    ngOnChanges(changes: SimpleChanges): void { }\r\n    ngOnDestroy(): void { }\r\n}","import { Observable } from 'rxjs';\r\nimport { ServiceLocator } from '../helpers/service-locator';\r\nimport { Store } from '../store/store';\r\nimport { Helpers } from '../helpers/helpers';\r\nimport { Dispatcher } from '../services/dispatcher';\r\nimport { DataStrategy } from '@ng-state/data-strategy';\r\n\r\nexport function InjectStore(newPath: string[] | string | ((currentPath, stateIndex) => string[] | string), intialState: Object | any = null, debug: boolean = false) {\r\n    let getStatePath = (currentPath, stateIndex, extractedPath) => {\r\n\r\n        let transformedPath = (<string[]>extractedPath).map(item => {\r\n            return item === '${stateIndex}'\r\n                ? stateIndex\r\n                : item;\r\n        });\r\n\r\n        return [...currentPath, ...transformedPath];\r\n    };\r\n\r\n    let getAbsoluteStatePath = (stateIndex: (string | number) | (string | number)[], extractedPath) => {\r\n        const transformedPath = (<string>extractedPath).split('/');\r\n        if (typeof stateIndex === 'string' || typeof stateIndex === 'number') {\r\n            stateIndex = [stateIndex];\r\n        }\r\n\r\n        let nthStatePathIndex = 0;\r\n        transformedPath.forEach((value, index) => {\r\n            if (value === '${stateIndex}') {\r\n                if ((<any[]>stateIndex).length <= nthStatePathIndex) {\r\n                    throw new Error(`State path ${newPath} has not enough stateIndexes set. Please provide stateIndexes as array in the same order as set in statePath.`);\r\n                }\r\n\r\n                transformedPath[index] = stateIndex[nthStatePathIndex];\r\n                nthStatePathIndex++;\r\n            }\r\n        });\r\n\r\n        return transformedPath;\r\n    };\r\n\r\n    let getAllGetters = (target: any): any[] => {\r\n        const targetMethods = Reflect.getPrototypeOf(target);\r\n        let methods = Object.entries(Object.getOwnPropertyDescriptors(targetMethods))\r\n            .map(([key, descriptor]: [string, any]) => {\r\n                return {\r\n                    name: key,\r\n                    isGetter: typeof descriptor.get === 'function'\r\n                };\r\n            })\r\n            .filter(method => method.isGetter)\r\n            .map(method => method.name);\r\n\r\n        return methods;\r\n    };\r\n\r\n    let convertGettersToProperties = (instance: any) => {\r\n        const getters = getAllGetters(instance);\r\n        getters.forEach(name => {\r\n\r\n            const tempGetter = instance[name];\r\n            if (tempGetter instanceof Observable) {\r\n                delete instance[name];\r\n                Object.defineProperty(instance, name, {\r\n                    value: tempGetter\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return (target: any) => {\r\n\r\n        target.prototype.createStore = function (currentPath: any[], stateIndex: (string | number) | (string | number)[]) {\r\n            this.aId = Helpers.guid();\r\n\r\n            let extractedPath = typeof newPath === 'function' && (<any>newPath).name === ''\r\n                ? (<any>newPath)(currentPath, stateIndex)\r\n                : newPath;\r\n\r\n            const statePath = typeof extractedPath === 'string'\r\n                ? getAbsoluteStatePath(stateIndex, extractedPath)\r\n                : getStatePath(currentPath, stateIndex, extractedPath);\r\n\r\n            const store = ServiceLocator.injector.get(Store) as Store<any>;\r\n            const dispatcher = ServiceLocator.injector.get(Dispatcher);\r\n\r\n            this.store = intialState\r\n                 ? store.initialize(statePath, intialState)\r\n                 : store.select(statePath);\r\n\r\n            this.stateChangeSubscription = this.store.subscribe((state: any) => {\r\n                this.state = state;\r\n                dispatcher.publish(this.aId);\r\n\r\n                if (debug && state.toJS) {\r\n                    const dataStrategy = ServiceLocator.injector.get(DataStrategy);\r\n                    console.info(dataStrategy.toJS(state));\r\n                }\r\n            });\r\n\r\n            convertGettersToProperties(this);\r\n\r\n            return statePath;\r\n        };\r\n\r\n        target.prototype.createTestStore = function (statePath: any[]) {\r\n            let store = ServiceLocator.injector.get(Store);\r\n            this.store = store.select(statePath);\r\n            const that = this;\r\n            this.stateChangeSubscription = this.store.subscribe((state: any) => {\r\n                that.state = state;\r\n            });\r\n        };\r\n\r\n        target.prototype.onDestroy = function () {\r\n            this.stateChangeSubscription.unsubscribe();\r\n        };\r\n    };\r\n}\r\n\r\nexport class HasStore<T> {\r\n    store: Store<T> = null;\r\n    state?: T = null;\r\n}"]}